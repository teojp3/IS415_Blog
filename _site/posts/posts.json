[
  {
    "path": "posts/2021-08-27-take-home-exercise-1/",
    "title": "Take Home Exercise 1",
    "description": "Analysing and Visualising Spatio-temporal Patterns of COVID-19 in DKI Jakarta, Indonesia.",
    "author": [
      {
        "name": "Teo Jun Peng",
        "url": "https://teojp3-is415.netlify.app/"
      }
    ],
    "date": "2021-09-09",
    "categories": [],
    "contents": "\r\n\r\nContents\r\n1. Introduction\r\n1.1 The Data\r\n\r\n2. Setting up the environment\r\n3. Data Wrangling\r\n3.1 Aspatial Data\r\n3.2 Geospatial Data\r\n3.3 Geospatial Data Integration\r\n\r\n4. Geospatial Analysis\r\n4.1 Data Preparation for Mapping\r\n4.2 Thematic Mapping\r\n4.3 Analytical Mapping\r\n\r\n5. Conclusion\r\n\r\n1. Introduction\r\nThis analysis aims to analyse and visualise spatio-temporal patterns of COVID-19 in DKI Jakarta, Indonesia. Out of 34 provinces in Indonesia, DKI Jakarta was the province affected most by the pandemic, with close to 24% of cumulative confirmed cases. However, the cumulative confirmed cases were not evenly distributed, therefore this analysis intends to unravel which sub-districts had the highest number of cases and how time has changed the overall distribution.\r\n1.1 The Data\r\nFor this analysis, the following data are used:\r\nOpen Data Covid-19 Provinsi DKI Jakarta. This portal provides daily update of COVID-19 measures at both sub-district and district level. For the purpose of this analysis, data at the sub-district level is used. The datasets are in .CSV format, and monthly datasets from March 2020 to July 2021 will be used.\r\nIndonesia Geospatial. This portal provides a comprehensive collection of geospatial data mainly in ESRI shapefile format at different geographical levels. For the purpose of this analysis, the Shapefile (SHP) Batas Desa Provinsi DKI Jakarta provided at PODES 2019 geospatial layer is used.\r\nP.S. For Open Data Covid-19 Provinsi DKI Jakarta, March 2020 Dataset only started from 25 March 2020 as per the source, so the dataset might not be a true representative of March 2020. Similarly for January 2021 Dataset, 30 January 2021 is the most updated data, the link to access 31 January 2021 is broken so this may not be a true representation of January 2021.\r\n2. Setting up the environment\r\nTo begin the study, R packages will be used for efficiency and a more comprehensive analysis, such as tidyverse and sf etc.\r\n\r\n\r\nload(\"THE1_workspace.Rdata\")\r\npackages = c(\"tidyverse\", \"sf\", \"readxl\", \"readr\", \"stringr\", \"tmap\", \"lemon\", \"formatR\")\r\nfor (p in packages) {\r\n    if (!require(p, character.only = T)) {\r\n        install.packages(p)\r\n    }\r\n    library(p, character.only = T)\r\n}\r\n\r\n\r\n\r\n3. Data Wrangling\r\n3.1 Aspatial Data\r\n3.1.1 Importing and creating a list\r\nDatasets will now be imported into Rstudio.\r\nlist.files function helps to create a list from the imported data files. The files are also imported all at once using a pattern to match the file names, ensuring full efficiency as compared to importing the files individually.\r\nThe R function lapply is also complementary for this process, as well as adding the file names as an additional column to the dataframes (So as to display the data by month later on).\r\n\r\n\r\nfile_list <- list.files(path = \"data/the1data/COVID-DATA\", pattern = \"*.xlsx\", full.names = T)\r\ndf_list <- lapply(seq_along(file_list), function(x) transform(read_xlsx(file_list[x]),\r\n    MonthYear = file_list[x]))\r\n\r\n\r\n\r\n3.1.2 Looking through the data and initial data cleaning\r\nFrom here we then manually check through df_list to find which Meninggal(english translation: Deaths) column is the correct one for each file, for referencing the coalesce process later on in the next few steps (E.g. For February 2021, Meninggal…1 is the correct column to use since it is the Meninggal column with no NA values.)\r\nThe inspection tells us that Meninggal…23 to Meninggal…25 is not used so we can skip those columns later on in the coalesce process.\r\n\r\n\r\ndf_list\r\n\r\n\r\n\r\nVisualisation of df_list, where we checked through the correct Meninggal columns to use3.1.3 Combine df_list into a dataframe\r\nWe will then combine df_list into a real dataframe using Idlpy function from the plyr package.\r\n\r\n\r\nlibrary(plyr)\r\ndf <- ldply(df_list, data.frame)\r\n\r\n\r\n\r\nVisualisation of df dataframe3.1.4 Conversion of data types for certain columns\r\nTo combine/integrate values from the various Meninggal columns, we will have to convert Meninggal…26 column’s data type so we can use coalesce function later on (because it originally is a chr type and chr type cannot combine with double type).\r\nJuly 2020 is using Meninggal…26 as the correct column, so we have to carry out the conversion.\r\n\r\n\r\ndf$Meninggal...26 = as.double(df$Meninggal...26)\r\n\r\ndf <- df %>%\r\n    na_if(\"N/A\")\r\n\r\n\r\n\r\n3.1.5 Coalesce process for NA/missing values\r\nIn this step we aim to combine ID_KEL into one main column, since some of the files have different layouts, which led to NA values in some rows. Coalesce is a function to take in values from another column (So if ID_KEL has NA values while ID_KEL…1 has values, we will take from ID_KEL…1 and add them into ID_KEL)\r\n\r\n\r\ndf <- df %>%\r\n    mutate(ID_KEL = coalesce(ID_KEL, ID_KEL...1, ID_KEL...2))\r\n\r\n\r\n\r\nSimilarly, we want to combine Meninggal together as one column, since some of the files have different layouts. We know that only Meninggal 28,29,30,31 is used after checking the datasets earlier on during df_list, so we will only integrate those columns together.\r\n\r\n\r\ndf <- df %>%\r\n    mutate(Meninggal = coalesce(Meninggal, Meninggal...28, Meninggal...29, Meninggal...30,\r\n        Meninggal...31, Meninggal...26))\r\n\r\n\r\n\r\n3.1.6 Subsetting the necessary columns from dataframe\r\nNext, we will get only the required columns out from the dataframe.\r\n\r\n\r\nlibrary(dplyr)\r\n\r\ndf2 <- df %>%\r\n    select(\"MonthYear\", \"ID_KEL\", \"Nama_provinsi\", \"nama_kota\", \"nama_kecamatan\",\r\n        \"nama_kelurahan\", \"POSITIF\", \"Meninggal\")\r\n\r\n\r\n\r\nSo df2 is the modified dataframe, and currently this is the output. lemon_print from lemon R Package is used for a more aesthetically pleasing dataframe.\r\n\r\n\r\nhead(df2)\r\n\r\n\r\nTable 1: Modified dataframe df2 (Rendered with lemon_print)\r\nMonthYear\r\nID_KEL\r\nNama_provinsi\r\nnama_kota\r\nnama_kecamatan\r\nnama_kelurahan\r\nPOSITIF\r\nMeninggal\r\ndata/the1data/COVID-DATA/Standar Kelurahan Data Corona (28 Februari 2021 Pukul 10.00).xlsx\r\nNA\r\nNA\r\nNA\r\nNA\r\nTOTAL\r\n339735\r\n5478\r\ndata/the1data/COVID-DATA/Standar Kelurahan Data Corona (28 Februari 2021 Pukul 10.00).xlsx\r\n3172051003\r\nDKI JAKARTA\r\nJAKARTA UTARA\r\nPADEMANGAN\r\nANCOL\r\n834\r\n9\r\ndata/the1data/COVID-DATA/Standar Kelurahan Data Corona (28 Februari 2021 Pukul 10.00).xlsx\r\n3173041007\r\nDKI JAKARTA\r\nJAKARTA BARAT\r\nTAMBORA\r\nANGKE\r\n617\r\n8\r\ndata/the1data/COVID-DATA/Standar Kelurahan Data Corona (28 Februari 2021 Pukul 10.00).xlsx\r\n3175041005\r\nDKI JAKARTA\r\nJAKARTA TIMUR\r\nKRAMAT JATI\r\nBALE KAMBANG\r\n755\r\n15\r\ndata/the1data/COVID-DATA/Standar Kelurahan Data Corona (28 Februari 2021 Pukul 10.00).xlsx\r\n3175031003\r\nDKI JAKARTA\r\nJAKARTA TIMUR\r\nJATINEGARA\r\nBALI MESTER\r\n358\r\n8\r\ndata/the1data/COVID-DATA/Standar Kelurahan Data Corona (28 Februari 2021 Pukul 10.00).xlsx\r\n3175101006\r\nDKI JAKARTA\r\nJAKARTA TIMUR\r\nCIPAYUNG\r\nBAMBU APUS\r\n870\r\n13\r\n\r\n3.1.7 Cleaning up MonthYear column so as to sort the values by month\r\nAs shown above, we will need to clean up the MonthYear column as it is very messy. We will clean up the MonthYear column using str_replace function, to replace unnecessary characters in the values.\r\n\r\n\r\ndf2 <- df2 %>%\r\n    mutate_at(\"MonthYear\", str_replace, \"data/the1data/COVID-DATA/Standar Kelurahan Data Corona\",\r\n        \"\")\r\n\r\ndf2 <- df2 %>%\r\n    mutate_at(\"MonthYear\", str_replace, \"[(]\", \"\")\r\n\r\ndf2 <- df2 %>%\r\n    mutate_at(\"MonthYear\", str_replace, \"[)]\", \"\")\r\n\r\ndf2 <- df2 %>%\r\n    mutate_at(\"MonthYear\", str_replace, \".xlsx\", \"\")\r\n\r\n\r\n\r\nWe will then turn MonthYear column into date data type using Sys.setlocale and as.Date functions.\r\n\r\n\r\nSys.setlocale(locale = \"ind\")\r\n\r\n\r\n[1] \"LC_COLLATE=Indonesian_Indonesia.1252;LC_CTYPE=Indonesian_Indonesia.1252;LC_MONETARY=Indonesian_Indonesia.1252;LC_NUMERIC=C;LC_TIME=Indonesian_Indonesia.1252\"\r\n\r\ndf2$MonthYear <- c(df2$MonthYear) %>%\r\n    as.Date(df2$MonthYear, format = \"%d %B %Y\")\r\n\r\n\r\n\r\nNext, we will remove any wrong/unnecessary rows (NA values in ID_KEL, subdistrict name as rows in ID_KEL column etc).\r\n\r\n\r\ndf2[!is.na(df2$ID_KEL), ]\r\n\r\ndf2 <- subset(df2, grepl(\"^\\\\d+$\", df2$ID_KEL))\r\n\r\n\r\n\r\nThen, sorting the modified dataframe by MonthYear and resetting of index.\r\n\r\n\r\ndf2 <- df2[order(df2$MonthYear), ]\r\nfinal_df <- df2\r\nrow.names(final_df) <- 1:nrow(final_df)\r\n\r\n\r\n\r\nVisualisation of final_df, with the modified MonthYear column and index reset3.1.8 Exporting .rds files out from the final dataframe\r\nWith all the data cleaning done, we will end out with writing out a .rds file from final_df and utilising it further on in the analysis, so as to ensure minimum data storage space.\r\n\r\n\r\naspatial_df <- write_rds(final_df, \"data/the1data/rds/aspatial_df.rds\")\r\n\r\n\r\n\r\n\r\n\r\naspatial_df <- read_rds(\"data/the1data/rds/aspatial_df.rds\")\r\n\r\n\r\n\r\n3.2 Geospatial Data\r\n3.2.1 Importing shapefile data into a simple feature dataframe\r\nThe following code cunk imports the DKI Jakarta geospatial data into R as a simple feature dataframe.\r\n\r\n\r\ngeospatial_df <- st_read(dsn = \"data/the1data/BATAS DESA DESEMBER 2019 DUKCAPIL DKI JAKARTA\",\r\n    layer = \"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\")\r\n\r\n\r\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source `C:\\teojp3\\IS415_blog\\data\\the1data\\BATAS DESA DESEMBER 2019 DUKCAPIL DKI JAKARTA' \r\n  using driver `ESRI Shapefile'\r\nSimple feature collection with 269 features and 161 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\r\nGeodetic CRS:  WGS 84\r\n\r\n3.2.2 Checking and ensuring Projected Coordinates Systems of the data is correct\r\n\r\n\r\nst_crs(geospatial_df)\r\n\r\n\r\nCoordinate Reference System:\r\n  User input: WGS 84 \r\n  wkt:\r\nGEOGCRS[\"WGS 84\",\r\n    DATUM[\"World Geodetic System 1984\",\r\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\r\n            LENGTHUNIT[\"metre\",1]]],\r\n    PRIMEM[\"Greenwich\",0,\r\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\r\n    CS[ellipsoidal,2],\r\n        AXIS[\"latitude\",north,\r\n            ORDER[1],\r\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\r\n        AXIS[\"longitude\",east,\r\n            ORDER[2],\r\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\r\n    ID[\"EPSG\",4326]]\r\n\r\nFrom the above output, we see that the Projected Coordinates System is WGS84 which is wrong, therefore we’ll Change the Projected Coordinates Systems to DGN95 (which is the national Projected Coordinates Systems of Indonesia).\r\n\r\n\r\njakarta_DGN95 <- st_transform(geospatial_df, 23845)\r\n\r\n\r\n\r\n3.2.3 Excluding the outer islands from the sf dataframe\r\nOuter Islands are also known as Kepulauan Seribu, we will exclude them as they are detached from the mainland.\r\n\r\n\r\njakarta_DGN95 <- subset(jakarta_DGN95, KAB_KOTA != \"KEPULAUAN SERIBU\")\r\n\r\n\r\n\r\n3.2.4 Subsetting necessary columns from the sf dataframe\r\nFor the analysis, we will only keep the first nine fields, whereby the last field is JUMLAH_PEN (Total Population).\r\n\r\n\r\njakarta_DGN95 <- jakarta_DGN95[, 0:9]\r\n\r\n\r\n\r\nVisualisation of jakarta_DGN95 sf dataframe, with only the required 9 columns3.2.5 Data cleaning and amended some inaccuracies between the datasets\r\nSome inaccuracies in the data were discovered between identification keys from aspatial and geospatial after manually checking through their data. Therefore, necessary amendments were made to the data.\r\nIf data cleaning process is not done, there will be data missing from some states (Plotted maps will have missing values).\r\n\r\n\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"BALEKAMBANG\"] <- \"BALE KAMBANG\"\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"HALIM PERDANA KUSUMA\"] <- \"HALIM PERDANA KUSUMAH\"\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"JATIPULO\"] <- \"JATI PULO\"\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"KALIBARU\"] <- \"KALI BARU\"\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"KRAMATJATI\"] <- \"KRAMAT JATI\"\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"PALMERIAM\"] <- \"PAL MERIAM\"\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"PINANGRANTI\"] <- \"PINANG RANTI\"\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"PAL MERAH\"] <- \"PALMERAH\"\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"TENGAH\"] <- \"KAMPUNG TENGAH\"\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"PULOGADUNG\"] <- \"PULO GADUNG\"\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"KALI DERES\"] <- \"KALIDERES\"\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"RAWAJATI\"] <- \"RAWA JATI\"\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == \"KRENDANG\"] <- \"KERENDANG\"\r\n\r\n\r\n\r\nThe below code chunk is to help us check if the identifier keys between the aspatial and geospatial data are correct.\r\n\r\n\r\na <- c(aspatial_df$nama_kelurahan)\r\nb <- c(jakarta_DGN95$DESA_KELUR)\r\n\r\na[!(a %in% b)]\r\n\r\n\r\n\r\n3.2.6 Removing NA value rows from dataframe\r\nWe will drop NA value rows, as they will affect our analysis results.\r\nP.S. 2 sub-districts (DANAU SUNTER and DANAU SUNTER DLL) will be dropped through this process as most of their values fall under NA values, only their OBJECT_ID and Sub-district names were present, population data and positive cases data were missing/NA.\r\n\r\n\r\njakarta_DGN95 <- jakarta_DGN95 %>%\r\n    drop_na(OBJECT_ID)\r\n\r\n\r\n\r\n3.3 Geospatial Data Integration\r\n3.3.1 Data preparation for Cumulative Case Rate by month (per 10,000 Population)\r\nFunctions from various packages will be used: e.g. pivot_wider() of tidyr package and group_by of dplyr package.\r\nThe formula we are using is:\r\nCOVID-19 Case Rate per 10,000 population (Monthly) = (Total Cumulative Cases / Total Population) x 10000\r\n\r\n\r\nCase_Rate <- aspatial_df %>%\r\n    inner_join(jakarta_DGN95, by = c(nama_kelurahan = \"DESA_KELUR\")) %>%\r\n    group_by(nama_kelurahan, MonthYear) %>%\r\n    dplyr::summarise(Covid_Cases_Per_10000_Pop = ((sum(POSITIF)/JUMLAH_PEN) * 10000)) %>%\r\n    ungroup() %>%\r\n    pivot_wider(names_from = MonthYear, values_from = Covid_Cases_Per_10000_Pop)\r\n\r\n\r\n\r\n3.3.2 Data preparation for Cumulative Death Rate by month (per 10,000 Population)\r\nFunctions from various packages will be used: e.g. pivot_wider() of tidyr package and group_by of dplyr package.\r\nThe formula we are using is:\r\nCOVID-19 Death Rate per 10,000 population (Monthly) = (Total Cumulative Deaths / Total Population) x 10000\r\n\r\n\r\nDeath_Rate <- aspatial_df %>%\r\n    inner_join(jakarta_DGN95, by = c(nama_kelurahan = \"DESA_KELUR\")) %>%\r\n    group_by(nama_kelurahan, MonthYear) %>%\r\n    dplyr::summarise(Death_Rate_Per_10000 = ((sum(Meninggal)/JUMLAH_PEN) * 10000)) %>%\r\n    ungroup() %>%\r\n    pivot_wider(names_from = MonthYear, values_from = Death_Rate_Per_10000)\r\n\r\n\r\n\r\n3.3.3 Data Preparation for Relative Risk mapping (with regards to Cumulative Death Rate)\r\nPreparing another dataframe Positive_Cases to join Death_Rate dataframe in the upcoming processes, to add the additional columns needed for relative risk mapping later on (E.g. POSITIF and Meninggal).\r\n\r\n\r\nPositive_Cases <- aspatial_df %>%\r\n    select(\"MonthYear\", \"nama_kelurahan\", \"POSITIF\", \"Meninggal\")\r\n\r\nPositive_Cases <- Positive_Cases[Positive_Cases$MonthYear == \"2021-07-31\", ]\r\n\r\n\r\n\r\nPositive_Cases dataframe will now be integrated within Death_Rate dataframe.\r\n\r\n\r\nDeath_Rate <- left_join(Positive_Cases, Death_Rate, by = c(nama_kelurahan = \"nama_kelurahan\"))\r\n\r\nDeath_Rate <- subset(Death_Rate, select = -c(MonthYear))\r\n\r\n\r\n\r\n3.3.4 Renaming the columns for both dataframes for easier identification during analysis\r\nThe columns will be renamed and simplified for easier identification, such as removing Date value from the MonthYear values (e.g. “2021-02-28” into “02-2021”).\r\n\r\n\r\ncolnames(Case_Rate) <- c(\"SUB_DISTRICT\", \"03-2020\", \"04-2020\", \"05-2020\", \"06-2020\",\r\n    \"07-2020\", \"08-2020\", \"09-2020\", \"10-2020\", \"11-2020\", \"12-2020\", \"01-2021\",\r\n    \"02-2021\", \"03-2021\", \"04-2021\", \"05-2021\", \"06-2021\", \"07-2021\")\r\n\r\ncolnames(Death_Rate) <- c(\"SUB_DISTRICT\", \"POSITIVE_CASES\", \"DEATHS\", \"03-2020\",\r\n    \"04-2020\", \"05-2020\", \"06-2020\", \"07-2020\", \"08-2020\", \"09-2020\", \"10-2020\",\r\n    \"11-2020\", \"12-2020\", \"01-2021\", \"02-2021\", \"03-2021\", \"04-2021\", \"05-2021\",\r\n    \"06-2021\", \"07-2021\")\r\n\r\n\r\n\r\n3.3.5 Additional data cleaning to ensure cleaned data is used for analysis\r\nA simple code chunk to quickly check and ensure there are no NA values.\r\n\r\n\r\nCase_Rate[rowSums(is.na(Case_Rate)) != 0, ]\r\n\r\n\r\n\r\nDeath_Rate dataframe is found to have NA rows, therefore we deleted them using na.omit() function.\r\n\r\n\r\nDeath_Rate[rowSums(is.na(Death_Rate)) != 0, ]\r\n\r\nDeath_Rate <- na.omit(Death_Rate)\r\n\r\n\r\n\r\n3.3.6 Exporting .rds files and using them for efficient data storage\r\nRds files are used as a form of best practice, so as to lessen the amount of data storage for the required data.\r\n\r\n\r\nCase_Rate_rds <- write_rds(Case_Rate, \"data/the1data/rds/Case_Rate_rds.rds\")\r\nDeath_Rate_rds <- write_rds(Death_Rate, \"data/the1data/rds/Death_Rate_rds.rds\")\r\n\r\n\r\n\r\n\r\n\r\nCase_Rate_rds <- read_rds(\"data/the1data/rds/Case_Rate_rds.rds\")\r\nDeath_Rate_rds <- read_rds(\"data/the1data/rds/Death_Rate_rds.rds\")\r\n\r\n\r\n\r\nVisualisation of Case_Rate_Rds\r\n\r\nVisualisation of Death_Rate_Rds\r\n\r\n4. Geospatial Analysis\r\n4.1 Data Preparation for Mapping\r\n4.1.1 Joining Geospatial data (jakarta_DGN95) with Aspatial data (Case Rate and Death Rate)\r\nleft_join of dplyr is used to join the geospatial data and attributes from the aspatial data using the names of sub-districts as a common identifier (“DESA_KELUR” for jakarta_DGN95, and “SUB_DISTRICT” for Case/Death_Rate_rds)\r\n\r\n\r\nCase_Rate_Final <- left_join(jakarta_DGN95, Case_Rate_rds, by = c(DESA_KELUR = \"SUB_DISTRICT\"))\r\n\r\nDeath_Rate_Final <- left_join(jakarta_DGN95, Death_Rate_rds, by = c(DESA_KELUR = \"SUB_DISTRICT\"))\r\n\r\n\r\n\r\nTaking a look at the Finalised Dataframes\r\n\r\n\r\nhead(Case_Rate_Final)\r\n\r\n\r\nSimple feature collection with 6 features and 26 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: -3627698 ymin: 689029.1 xmax: -3619528 ymax: 693390.8\r\nProjected CRS: DGN95 / Indonesia TM-3 zone 54.1\r\n  OBJECT_ID  KODE_DESA          DESA   KODE    PROVINSI      KAB_KOTA\r\n1     25477 3173031006     KEAGUNGAN 317303 DKI JAKARTA JAKARTA BARAT\r\n2     25478 3173031007        GLODOK 317303 DKI JAKARTA JAKARTA BARAT\r\n3     25397 3171031003 HARAPAN MULIA 317103 DKI JAKARTA JAKARTA PUSAT\r\n4     25400 3171031006  CEMPAKA BARU 317103 DKI JAKARTA JAKARTA PUSAT\r\n5     25390 3171021001    PASAR BARU 317102 DKI JAKARTA JAKARTA PUSAT\r\n6     25391 3171021002  KARANG ANYAR 317102 DKI JAKARTA JAKARTA PUSAT\r\n    KECAMATAN    DESA_KELUR JUMLAH_PEN   03-2020   04-2020   05-2020\r\n1  TAMAN SARI     KEAGUNGAN      21609 0.0000000  1.388310  1.851081\r\n2  TAMAN SARI        GLODOK       9069 1.1026574  2.205315  2.205315\r\n3   KEMAYORAN HARAPAN MULIA      29085 0.6876397  3.782018  5.501117\r\n4   KEMAYORAN  CEMPAKA BARU      41913 0.0000000  3.101663  7.157684\r\n5 SAWAH BESAR    PASAR BARU      15793 1.2663838 10.131071 14.563414\r\n6 SAWAH BESAR  KARANG ANYAR      33383 0.0000000  2.396429  5.391966\r\n    06-2020   07-2020   08-2020  09-2020   10-2020   11-2020\r\n1  2.776621  8.792633 27.766209 66.63890  84.68694 102.27220\r\n2  2.205315  6.615944  8.821259 31.97706  47.41427  61.74881\r\n3 10.658415 24.755028 44.352759 63.60667  92.48754 109.33471\r\n4 12.168062 22.904588 44.139050 63.70339 103.30924 128.36113\r\n5 11.397455 16.462990 38.624707 93.71240 116.50731 138.03584\r\n6 11.383039 16.475452 27.858491 45.83171  69.19690  87.76922\r\n    12-2020  01-2021  02-2021  03-2021  04-2021  05-2021  06-2021\r\n1 120.32024 161.5068 201.3050 231.3851 249.8959 263.7790 335.5084\r\n2  94.82854 168.7066 250.3032 309.8467 347.3371 378.2115 527.0702\r\n3 136.49648 204.5728 278.1502 306.6873 322.5030 339.3502 438.0265\r\n4 160.80930 245.0314 320.6642 350.4879 371.7224 379.3572 480.2806\r\n5 188.69119 279.2376 385.6139 443.2343 464.1297 480.5927 609.7638\r\n6 119.22236 164.7545 220.7711 247.7309 261.8099 271.3956 339.9934\r\n   07-2021                       geometry\r\n1 545.1432 MULTIPOLYGON (((-3626874 69...\r\n2 853.4568 MULTIPOLYGON (((-3627130 69...\r\n3 652.9139 MULTIPOLYGON (((-3621251 68...\r\n4 694.7725 MULTIPOLYGON (((-3620608 69...\r\n5 939.6568 MULTIPOLYGON (((-3624097 69...\r\n6 540.6944 MULTIPOLYGON (((-3624785 69...\r\n\r\n\r\n\r\nhead(Death_Rate_Final)\r\n\r\n\r\nSimple feature collection with 6 features and 28 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: -3627698 ymin: 689029.1 xmax: -3619528 ymax: 693390.8\r\nProjected CRS: DGN95 / Indonesia TM-3 zone 54.1\r\n  OBJECT_ID  KODE_DESA          DESA   KODE    PROVINSI      KAB_KOTA\r\n1     25477 3173031006     KEAGUNGAN 317303 DKI JAKARTA JAKARTA BARAT\r\n2     25478 3173031007        GLODOK 317303 DKI JAKARTA JAKARTA BARAT\r\n3     25397 3171031003 HARAPAN MULIA 317103 DKI JAKARTA JAKARTA PUSAT\r\n4     25400 3171031006  CEMPAKA BARU 317103 DKI JAKARTA JAKARTA PUSAT\r\n5     25390 3171021001    PASAR BARU 317102 DKI JAKARTA JAKARTA PUSAT\r\n6     25391 3171021002  KARANG ANYAR 317102 DKI JAKARTA JAKARTA PUSAT\r\n    KECAMATAN    DESA_KELUR JUMLAH_PEN POSITIVE_CASES DEATHS 03-2020\r\n1  TAMAN SARI     KEAGUNGAN      21609           1178     11       0\r\n2  TAMAN SARI        GLODOK       9069            774     13       0\r\n3   KEMAYORAN HARAPAN MULIA      29085           1899     34       0\r\n4   KEMAYORAN  CEMPAKA BARU      41913           2912     56       0\r\n5 SAWAH BESAR    PASAR BARU      15793           1484     20       0\r\n6 SAWAH BESAR  KARANG ANYAR      33383           1805     32       0\r\n    04-2020   05-2020  06-2020  07-2020   08-2020   09-2020   10-2020\r\n1 0.0000000 0.0000000 0.000000 0.000000 0.4627701 0.4627701 0.4627701\r\n2 0.0000000 1.1026574 1.102657 1.102657 1.1026574 1.1026574 2.2053148\r\n3 0.6876397 0.6876397 1.031460 1.719099 2.0629190 2.7505587 3.0943785\r\n4 1.1929473 1.4315368 1.670126 1.670126 2.1473051 2.8630735 4.0560208\r\n5 0.0000000 0.0000000 0.000000 0.000000 0.0000000 0.6331919 1.2663838\r\n6 0.2995537 0.5991073 1.497768 1.497768 1.4977683 1.4977683 2.0968757\r\n    11-2020   12-2020   01-2021  02-2021  03-2021  04-2021   05-2021\r\n1 0.9255403 0.9255403 0.9255403 1.388310 1.388310 1.851081  2.776621\r\n2 3.3079722 3.3079722 4.4106296 5.513287 6.615944 9.923917 11.026574\r\n3 3.0943785 3.7820182 4.4696579 4.813478 4.813478 5.157298  5.844937\r\n4 4.2946103 4.5331997 4.7717892 5.726147 6.919094 6.919094  7.634863\r\n5 2.5327677 3.7991515 4.4323434 4.432343 6.331919 6.965111  8.231495\r\n6 2.0968757 2.6959830 4.4933050 5.991073 5.991073 5.991073  6.590181\r\n    06-2021   07-2021                       geometry\r\n1  3.239391  5.090472 MULTIPOLYGON (((-3626874 69...\r\n2 12.129231 14.334546 MULTIPOLYGON (((-3627130 69...\r\n3  7.564036 11.689875 MULTIPOLYGON (((-3621251 68...\r\n4  9.782168 13.361010 MULTIPOLYGON (((-3620608 69...\r\n5  9.497879 12.663838 MULTIPOLYGON (((-3624097 69...\r\n6  7.488842  9.585717 MULTIPOLYGON (((-3624785 69...\r\n\r\n4.1.2 Checking for NA rows in the combined dataframes\r\nOnce again, checking for NA rows to ensure substantial analysis results will be attained.\r\n\r\n\r\nCase_Rate_Final[rowSums(is.na(Case_Rate_Final)) != 0, ]\r\n\r\n\r\nSimple feature collection with 0 features and 26 fields\r\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\r\nProjected CRS: DGN95 / Indonesia TM-3 zone 54.1\r\n [1] OBJECT_ID  KODE_DESA  DESA       KODE       PROVINSI   KAB_KOTA  \r\n [7] KECAMATAN  DESA_KELUR JUMLAH_PEN 03-2020    04-2020    05-2020   \r\n[13] 06-2020    07-2020    08-2020    09-2020    10-2020    11-2020   \r\n[19] 12-2020    01-2021    02-2021    03-2021    04-2021    05-2021   \r\n[25] 06-2021    07-2021    geometry  \r\n<0 rows> (or 0-length row.names)\r\n\r\nDeath_Rate_Final[rowSums(is.na(Death_Rate_Final)) != 0, ]\r\n\r\n\r\nSimple feature collection with 0 features and 28 fields\r\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\r\nProjected CRS: DGN95 / Indonesia TM-3 zone 54.1\r\n [1] OBJECT_ID      KODE_DESA      DESA           KODE          \r\n [5] PROVINSI       KAB_KOTA       KECAMATAN      DESA_KELUR    \r\n [9] JUMLAH_PEN     POSITIVE_CASES DEATHS         03-2020       \r\n[13] 04-2020        05-2020        06-2020        07-2020       \r\n[17] 08-2020        09-2020        10-2020        11-2020       \r\n[21] 12-2020        01-2021        02-2021        03-2021       \r\n[25] 04-2021        05-2021        06-2021        07-2021       \r\n[29] geometry      \r\n<0 rows> (or 0-length row.names)\r\n\r\nNo NA rows were found, so we are good to proceed on.\r\n4.2 Thematic Mapping\r\n4.2.1 Small multiples choropleth maps to see the distribution of COVID Cases and Deaths: March 2020 (First Month)\r\nPlotting small multiples choropleth maps using KAB_KOTA field (Municipality Level, e.g. West Jakarta, North Jakarta etc). March 2020 is the first month that we have data on so we will be using March 2020 data to start this study.\r\n\r\n\r\ntm_shape(Case_Rate_Final) + tm_fill(\"03-2020\", style = \"jenks\", palette = \"Blues\",\r\n    thres.poly = 0) + tm_facets(by = \"KAB_KOTA\", free.coords = TRUE, drop.shapes = TRUE) +\r\n    tm_layout(legend.show = TRUE, main.title = \"Distribution of cumulative confirmed Case\\nRate per 10,000 Population (March 2020)\",\r\n        main.title.position = \"left\", title.size = 12) + tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\nFrom the plotted map, we can see that there is an even distribution throughout the different municipalities (no particular municipality with outlandish number of cases).\r\nBut Gelora in Tanah Abang, Jakarta Pusat, and the area surrounding Senayan in Kebayoran Baru, Jakarta Selatan seemingly has slightly more cases than the other sub-districts as shown by their darker blue shading.\r\n\r\n\r\ntm_shape(Death_Rate_Final) + tm_fill(\"03-2020\", style = \"jenks\", palette = \"Greens\",\r\n    thres.poly = 0) + tm_facets(by = \"KAB_KOTA\", free.coords = TRUE, drop.shapes = TRUE) +\r\n    tm_layout(legend.show = TRUE, main.title = \"Distribution of cumulative Death Rate\\nper 10,000 Population (March 2020)\",\r\n        main.title.position = \"left\", title.size = 12) + tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\nSimilar to case rate, we can see that there is a seemingly even distribution throughout the different districts (no particular district with outlandish number of death cases).\r\nHowever, the sub-districts of Gondangdia in Mentang, Jakarta Pusat and Karet Semanggi of Setiabudi, Jakarta Selatan has slightly more death cases than the other sub-districts.\r\n4.2.2 Small multiples choropleth maps to see the distribution of COVID Cases and Deaths: July 2021 (Last Month)\r\nJuly 2021 is the last month that we have data on, so we will be using it to see the change in distribution from the first to the last month.\r\n\r\n\r\ntm_shape(Case_Rate_Final) + tm_fill(\"07-2021\", style = \"jenks\", palette = \"Blues\",\r\n    thres.poly = 0) + tm_facets(by = \"KAB_KOTA\", free.coords = TRUE, drop.shapes = TRUE) +\r\n    tm_layout(legend.show = TRUE, main.title = \"Distribution of cumulative confirmed Case\\nRate per 10,000 Population (July 2021)\",\r\n        main.title.position = \"left\", title.size = 12) + tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\nWe won’t be without taking into account the difference in number of cases from March 2020 to July 2020, this visualisation simply serves as a mean for comparing the distribution of cases across Jakarta.\r\nSimilar to the first month, an even distribution is seen throughout the different districts.\r\nHowever, there is a concentrated subdistrict Gambir in Gambir, Jakarta Pusat with a much higher number of cases than the other sub-districts as shown by the darker blue shading.\r\n\r\n\r\ntm_shape(Death_Rate_Final) + tm_fill(\"07-2021\", style = \"jenks\", palette = \"Greens\",\r\n    thres.poly = 0) + tm_facets(by = \"KAB_KOTA\", free.coords = TRUE, drop.shapes = TRUE) +\r\n    tm_layout(legend.show = TRUE, main.title = \"Distribution of cumulative Death Rate\\nper 10,000 Population (July 2021)\",\r\n        main.title.position = \"left\", title.size = 12) + tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\nSimilar to case rate, we can see that there is a seemingly even distribution throughout the different sub-districts of Jakarta.\r\nHowever, the subdistrict of Gambir in Gambir, Jakarta Pusat is an outlier as well, with a much higher number of death cases than the other sub-districts as shown by the darker green shading.\r\nP.S. As mentioned earlier on, these visualisations does not take into account the difference in number of cases from March 2020 to July 2020, we are only comparing the change in distribution of cases across Jakarta.\r\n4.2.3 Time-series choropleth maps of Positive Cases Rate throughout March 2020 to July 2021\r\nTo take into account the increase in total cases, time-series choropleth maps will be used to do this analysis.\r\nFirstly, summary function is used to find the minimum and highest value from Case_Rate_Final “07-2021” (AKA column with the most updated number of cumulative positive cases), so as to determine the appropriate category breakpoints.\r\n\r\n\r\nsummary(Case_Rate_Final$`07-2021`)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n  187.3   545.1   658.3   705.3   779.7  3808.3 \r\n\r\nWith reference to the results above, the breakpoints for our breaks vector will be c(0, 500, 1000, 1500, 2000, 2500, 3000).\r\nWe will plot small multiple maps to see how the distribution of COVID cases has changed on a monthly basis from March 2020 to July 2021.\r\n\r\n\r\ntm_shape(Case_Rate_Final) + tm_polygons(c(\"03-2020\", \"04-2020\", \"05-2020\", \"06-2020\",\r\n    \"07-2020\", \"08-2020\", \"09-2020\", \"10-2020\", \"11-2020\", \"12-2020\", \"01-2021\",\r\n    \"02-2021\", \"03-2021\", \"04-2021\", \"05-2021\", \"06-2021\", \"07-2021\"), breaks = c(0,\r\n    500, 1000, 1500, 2000, 2500, 3000), palette = \"Reds\") + tm_layout(panel.show = TRUE,\r\n    panel.labels = c(\"03-2020\", \"04-2020\", \"05-2020\", \"06-2020\", \"07-2020\", \"08-2020\",\r\n        \"09-2020\", \"10-2020\", \"11-2020\", \"12-2020\", \"01-2021\", \"02-2021\", \"03-2021\",\r\n        \"04-2021\", \"05-2021\", \"06-2021\", \"07-2021\"), panel.label.size = 3, asp = NA,\r\n    legend.show = FALSE)\r\n\r\n\r\n\r\n\r\n\r\nSimilar to the above visualisation, but now we will look at an estimated 5-month change in time period (Splitting the 17 months into 4 parts, which equals ~5) to see how the distribution of COVID cases has changed from March 2020 to July 2021.\r\n\r\n\r\ntm_shape(Case_Rate_Final) + tm_polygons(c(\"03-2020\", \"08-2020\", \"02-2021\", \"07-2021\"),\r\n    breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000), palette = \"Reds\") + tm_layout(panel.show = TRUE,\r\n    panel.labels = c(\"03-2020\", \"08-2020\", \"02-2021\", \"07-2021\"), panel.label.size = 3,\r\n    asp = NA, legend.show = FALSE)\r\n\r\n\r\n\r\n\r\n\r\nBased on the 2 visualisations above, here are some of the observations made about Positive Cases Rate:\r\nThe first significant outbreak originated from the subdistrict of Gambir in Gambir, Jakarta Pusat in September 2020\r\nThe outbreak then started to affect some of the neighbouring subdistricts in the following months (Oct 2020 to Feb 2021), mainly below Gambir, such as Senayan and Halim Perdan Kusumah\r\nAs the virus spread to more subdistricts, 50% of districts started to suffer from significant outbreaks as seen in June 2021’s small multiple map\r\nBy the time data was collected at the end of July 2021, we can see that the COVID outbreak has reached around 80% of Jakarta. This is evident from the wider spread of deeper red in July 2021’s small multiple map, which is a stark difference from June 2021’s map.\r\nThe subdistricts affected most seemed to cluster around the initial origin district of Gambir, with a seemingly dispersed pattern for the subdistricts with higher number of cases.\r\n4.2.4 Time-series choropleth map of Death Rate throughout March 2020 to July 2021\r\nUtilising the same method as Case Rate, we will use time-series choropleth maps to see the change in distribution for deaths in the region.\r\nFirstly, summary function is used to find the minimum and highest value from Death_Rate_Final “07-2021” (AKA column with the most updated number of cumulative positive cases), so as to determine the appropriate category breakpoints.\r\n\r\n\r\nsummary(Death_Rate_Final$`07-2021`)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n  3.439   8.446  10.298  10.602  12.508  42.098 \r\n\r\nWith reference to the results above, the breakpoints for our breaks vector will be c(0, 5, 10, 15, 20, 25, 30, 35, 40).\r\nSmall multiple maps will be plotted to see how the distribution of deaths has changed on a monthly basis from March 2020 to July 2021.\r\n\r\n\r\ntm_shape(Death_Rate_Final) + tm_polygons(c(\"03-2020\", \"04-2020\", \"05-2020\", \"06-2020\",\r\n    \"07-2020\", \"08-2020\", \"09-2020\", \"10-2020\", \"11-2020\", \"12-2020\", \"01-2021\",\r\n    \"02-2021\", \"03-2021\", \"04-2021\", \"05-2021\", \"06-2021\", \"07-2021\"), breaks = c(0,\r\n    5, 10, 15, 20, 25, 30, 35, 40), palette = \"Oranges\") + tm_layout(panel.show = TRUE,\r\n    panel.labels = c(\"03-2020\", \"04-2020\", \"05-2020\", \"06-2020\", \"07-2020\", \"08-2020\",\r\n        \"09-2020\", \"10-2020\", \"11-2020\", \"12-2020\", \"01-2021\", \"02-2021\", \"03-2021\",\r\n        \"04-2021\", \"05-2021\", \"06-2021\", \"07-2021\"), panel.label.size = 3, asp = NA,\r\n    legend.show = FALSE)\r\n\r\n\r\n\r\n\r\n\r\nSimilar to the above visualisation, but now we will look at an estimated 5-month change in time period (Splitting the 17 months into 4 parts, which equals ~5) to see how the distribution of deaths from COVID has changed from March 2020 to July 2021.\r\n\r\n\r\ntm_shape(Death_Rate_Final) + tm_polygons(c(\"03-2020\", \"08-2020\", \"02-2021\", \"07-2021\"),\r\n    breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40), palette = \"Oranges\") + tm_layout(panel.show = TRUE,\r\n    panel.labels = c(\"03-2020\", \"08-2020\", \"02-2021\", \"07-2021\"), panel.label.size = 3,\r\n    legend.show = FALSE)\r\n\r\n\r\n\r\n\r\n\r\nBased on the 2 visualisations above, here are some of the observations made about Death Cases Rate:\r\nSame as Positive Cases Rate, the first sub-district with concerning number of deaths was the same subdistrict of Gambir in Gambir, Jakarta Pusat, however it was only more significant in January 2021 as compared to September 2020 for Cases Rate\r\nThe number of deaths then started to increase around the neighbouring subdistricts in the following months (Feb 2021 to July 2021)\r\n> 50% of districts started to suffer from significant number of deaths from March 2021 onwards, as seen in March 2021 to June 2021’s small multiple maps\r\nSimilar to Case Rate, by the time data was collected at the end of July 2021, we can see that deaths from COVID cases has reached *around 75% of Jakarta. This is evident from the wider spread of deeper orange in July 2021’s small multiple map, which is quite a drastic difference from June 2021’s map\r\nThe end result in July 2021 looked similar to Case Rate’s July 2021 map, with subdistricts affected most seemingly clustered around the initial origin district of Gambir\r\n4.3 Analytical Mapping\r\n4.3.1 Plotting Percentile Maps to visualise extreme values\r\nFirstly, we will extract 07-2021 as a vector out of an sf data frame.\r\n\r\n\r\npercent <- c(0, 0.01, 0.1, 0.5, 0.9, 0.99, 1)\r\nvar <- Case_Rate_Final[\"07-2021\"] %>%\r\n    st_set_geometry(NULL)\r\nquantile(var[, 1], percent)\r\n\r\n\r\n       0%        1%       10%       50%       90%       99%      100% \r\n 187.3189  286.2999  458.1759  658.3395  939.6568 1966.0003 3808.2902 \r\n\r\nThe extraction will need the following code chunk (a function) to run.\r\n\r\n\r\nget.var <- function(vname, df) {\r\n    v <- df[vname] %>%\r\n        st_set_geometry(NULL)\r\n    v <- unname(v[, 1])\r\n    return(v)\r\n}\r\n\r\n\r\n\r\nPercentile Map for Positive Cases Rate\r\n\r\n\r\npercent <- c(0, 0.01, 0.1, 0.5, 0.9, 0.99, 1)\r\nvar <- get.var(\"07-2021\", Case_Rate_Final)\r\nbperc <- quantile(var, percent)\r\ntm_shape(jakarta_DGN95) + tm_polygons() + tm_shape(Case_Rate_Final) + tm_fill(\"07-2021\",\r\n    title = \"Percentile\", breaks = bperc, palette = \"Reds\", labels = c(\"< 1%\", \"1% - 10%\",\r\n        \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\")) + tm_borders() + tm_layout(main.title = \"Percentile Map for Cumulative Cases Rate in July 2021\",\r\n    main.title.position = \"left\", main.title.size = 1.2, legend.outside = TRUE, frame = TRUE) +\r\n    tm_compass(type = \"8star\", size = 2, position = c(\"left\", \"bottom\")) + tm_scale_bar(position = c(\"left\",\r\n    \"bottom\"))\r\n\r\n\r\n\r\n\r\nFrom the above percentile map, we can see:\r\nThe various sub-districts actually fall across all 5 classes of Percentile\r\nMajority of them falls under the 1% - 10% and 50% - 90% class\r\nFor the extreme ends,only around 3-4 sub-districts falls under >99% class and 2 sub-districts falls under <1% class\r\nThis means that there are a small number of outliers\r\nPercentile Map for Death Rate\r\n\r\n\r\npercent <- c(0, 0.01, 0.1, 0.5, 0.9, 0.99, 1)\r\nvar <- get.var(\"07-2021\", Death_Rate_Final)\r\nbperc <- quantile(var, percent)\r\ntm_shape(jakarta_DGN95) + tm_polygons() + tm_shape(Death_Rate_Final) + tm_fill(\"07-2021\",\r\n    title = \"Percentile\", breaks = bperc, palette = \"Oranges\", labels = c(\"< 1%\",\r\n        \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\")) + tm_borders() +\r\n    tm_layout(main.title = \"Percentile Map for Cumulative Death Rate in July 2021\",\r\n        main.title.position = \"left\", main.title.size = 1.2, legend.outside = TRUE,\r\n        frame = TRUE) + tm_compass(type = \"8star\", size = 2, position = c(\"left\",\r\n    \"bottom\")) + tm_scale_bar(position = c(\"left\", \"bottom\"))\r\n\r\n\r\n\r\n\r\nFrom the above percentile map, we can see:\r\nThe various sub-districts actually fall across all 5 classes of Percentile\r\nMajority of them falls under the 1% - 10% and 50% - 90% class\r\nFor the extreme ends, only around 2-3 sub-districts falls under >99% class and 2 sub-districts falls under <1% class\r\nThis means that there are a small number of outliers, but they are not significant\r\n4.3.2 Plotting BoxMaps to visualise outliers\r\nThe following code chunk will be used to create the appropriate break points for plotting a box map.\r\n\r\n\r\nboxbreaks <- function(v, mult = 1.5) {\r\n    qv <- unname(quantile(v))\r\n    iqr <- qv[4] - qv[2]\r\n    upfence <- qv[4] + mult * iqr\r\n    lofence <- qv[2] - mult * iqr\r\n    # initialize break points vector\r\n    bb <- vector(mode = \"numeric\", length = 7)\r\n    # logic for lower and upper fences no lower outliers\r\n    if (lofence < qv[1]) {\r\n        bb[1] <- lofence\r\n        bb[2] <- floor(qv[1])\r\n    } else {\r\n        bb[2] <- lofence\r\n        bb[1] <- qv[1]\r\n    }\r\n    if (upfence > qv[5]) {\r\n        # no upper outliers\r\n        bb[7] <- upfence\r\n        bb[6] <- ceiling(qv[5])\r\n    } else {\r\n        bb[6] <- upfence\r\n        bb[7] <- qv[5]\r\n    }\r\n    bb[3:5] <- qv[2:4]\r\n    return(bb)\r\n}\r\n\r\n\r\n\r\nThe following code chunk creates an R function that will help extract a variable as a vector from a chosen sf data frame.\r\n\r\n\r\nget.var <- function(vname, df) {\r\n    v <- df[vname] %>%\r\n        st_set_geometry(NULL)\r\n    v <- unname(v[, 1])\r\n    return(v)\r\n}\r\n\r\n\r\n\r\nNext, we will be creating a function that will help us churn out box maps whenever needed.\r\n\r\n\r\nboxmap <- function(vnam, df, legtitle = NA, mtitle = \"Box Map\", mult = 1.5) {\r\n    var <- get.var(vnam, df)\r\n    bb <- boxbreaks(var)\r\n    tm_shape(df) + tm_fill(vnam, title = legtitle, breaks = bb, palette = \"Blues\",\r\n        labels = c(\"lower outlier\", \"< 25%\", \"25% - 50%\", \"50% - 75%\", \"> 75%\", \"upper outlier\")) +\r\n        tm_borders() + tm_layout(main.title = \"Box Map Visualisation\", main.title.position = \"left\",\r\n        main.title.size = 1.2, legend.outside = TRUE, legend.height = 0.45, legend.width = 0.35,\r\n        frame = TRUE) + tm_compass(type = \"8star\", size = 2, position = c(\"left\",\r\n        \"bottom\")) + tm_scale_bar(position = c(\"left\", \"bottom\"))\r\n}\r\n\r\n\r\n\r\nBox Map for Case Rate\r\n\r\n\r\nboxmap(\"07-2021\", Case_Rate_Final)\r\n\r\n\r\n\r\n\r\nFrom the above box map, we can see for Positive Cases Rate:\r\nA difference in results as compared to the results we got from the earlier Percentile Map\r\nMost of the sub-districts fall into the 25% to the upper outlier classes.\r\nEarlier on, we noticed there were only a small number of outliers but through this box map visualisation, we could see that there are actually quite a significant number of sub-districts that fall into the lower outlier and upper outlier classes\r\nThis means that there would be a stark difference in the number of cases between sub-districts, especially when comparing one that falls under lower outlier and another from upper outlier\r\nBut the difference in results may have also arose from the Percentile Map’s classes, as their lower and upper outliers equivalents were <1% and >99% respectively, which are more extreme than this box map’s classes.\r\nBox Map for Death Rate\r\n\r\n\r\nboxmap(\"07-2021\", Death_Rate_Final)\r\n\r\n\r\n\r\n\r\nFrom the above box map, we can see for Death Rate:\r\nSimilar results to what we got from the earlier Percentile Map\r\nMost of the sub-districts fall into the 25% to >75 classes.\r\nEarlier on, we noticed there were only a small number of outliers but through this box map visualisation, we could see that there are actually quite a significant number of sub-districts that fall into the lower outlier classes\r\nHowever, this may be a positive thing actually. More sub-districts falling into the lower outlier means that there are lesser deaths, which is definitely something we hope to maintain during this pandemic, mimimise the amount of deaths caused by the COVID-19 virus.\r\n4.3.3 Plotting Relative Risk Maps\r\nThe concept of a Standardised Mortality Rate (SMR) or also known as Relative Risk, is a commonly used metric in public health analysis or studies of the spread of a disease. Through this SMR, we can see the various indicated risk levels the sub-districts of Jakarta are parked under, based on the data we analysed.\r\nTo prepare the required data for relative risk map, we will start off with computing the reference rate, which is the total sum of deaths over the total sum of the population.\r\n\r\n\r\nSum_deaths <- sum(Death_Rate_Final$DEATHS)\r\nSum_population <- sum(Death_Rate_Final$JUMLAH_PEN)\r\n\r\nreference_rate <- Sum_deaths/Sum_population\r\n\r\n\r\n\r\nAfter that, we will compute the expected number of deaths based on the reference rate of the whole province and the individual sub-district population (JUMLAH_PEN).\r\n\r\n\r\nExpected_Deaths <- reference_rate * Death_Rate_Final$JUMLAH_PEN\r\n\r\n\r\n\r\nFinally, we will divide the No. of Deaths per sub-district over the expected number of deaths to get the SMR. The SMR will then give us a quick analysis of which sub-districts have higher than expected number of deaths, and which sub-districts have lower than expected deaths.\r\n\r\n\r\nDeath_Rate_Final$SMR <- Death_Rate_Final$DEATHS/Expected_Deaths\r\n\r\n\r\n\r\nPlotting Relative Risk Map\r\nIn this map visualisation, sub-districts highlighted in blue indicates a risk lower than the province average, or SMR < 1. On the other hand, those highlighted in red indicates a higher risk than the province average, or SMR > 1.\r\n\r\n\r\nRR_Map <- tm_shape(Death_Rate_Final) + tm_fill(\"SMR\", title = \"Excess Risk\", breaks = c(-100,\r\n    0.25, 0.5, 1, 2, 4, 1000), labels = c(\"<.25\", \".25 - .50\", \".50 - 1.00\", \"1.00 - 2.00\",\r\n    \"2.00 - 4.00\", \"> 4.00\"), palette = \"-RdBu\") + tm_borders() + tm_layout(legend.outside = TRUE,\r\n    legend.outside.position = \"right\") + tm_compass(type = \"8star\", size = 2, position = c(\"left\",\r\n    \"bottom\")) + tm_scale_bar(position = c(\"left\", \"bottom\"))\r\n\r\nRR_Map\r\n\r\n\r\n\r\n\r\nResults from the Relative Risk Map:\r\nAs expected, the sub-district of Gambir has the highest risk amongst the sub-districts, with a SMR of > 4. This is not surprising as Gambir has been identified during the earlier analyses as the origin of where the COVID-19 virus actually broke out significantly.\r\nThe sub-district of Karet Kuningan in Setiabudi, Jakarta Seletan is also identified as a significant high risk sub-district, with a SMR of 2.0 to 4.0, which is still higher than the cut off of high risk SMR > 1. This was unforeseen because this particular sub-district wasn’t distinctive during the earlier analyses.\r\nThe rest of the sub-districts are distributed almost equally, half being high risk with SMR of 1.0 - 2.0, and another half being low risk, as highlighted in blue with a SMR of < 1.\r\nThis phenomenon is not the most favourable, hopefully the situation will become better over time and we hope to see more blue than red in the following months.\r\n5. Conclusion\r\nThis spatio-temporal analysis of COVID-19 patterns in DKI Jakarta, Indonesia has been a substantial one, with certain spatial patterns being discovered throughout the months of data.\r\nThe most concerning sub-district would definitely be Gambir, which stood out multiple times throughout the various analyses. It was also the origin of the first outbreak, which led to other sub-districts being affected greatly as well, especially those in its immediate surroundings.\r\nThe COVID-19 pandemic has undoubtedly affected the whole world, we need to be strong and work together as one during this uncertain time.\r\nI shall end this study with a positive quote;\r\n“You can’t stop the waves, but you can learn to surf”\r\n– Jon Kabat-Zinn\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-27-take-home-exercise-1/take-home-exercise-1_files/figure-html5/unnamed-chunk-45-1.png",
    "last_modified": "2021-09-10T16:40:23+08:00",
    "input_file": "take-home-exercise-1.knit.md"
  },
  {
    "path": "posts/2021-09-06-in-class-exercise-4/",
    "title": "In-class Exercise 4",
    "description": "In this hands-on exercise, we learnt how to handle raster-based geospatial data and convert data to spatial/sp/ppp classes using sf package.",
    "author": [
      {
        "name": "Teo Jun Peng",
        "url": "https://teojp3-is415.netlify.app/"
      }
    ],
    "date": "2021-09-06",
    "categories": [],
    "contents": "\r\nInstalling and Loading the R Packages\r\nsf is mainly used for importing geospatial data\r\nraster is for handling raster-based geospatial data\r\n\r\n\r\npackages = c('maptools', 'sf', 'raster','spatstat', 'tmap', 'tidyverse', 'onemapsgapi')\r\nfor (p in packages){\r\nif(!require(p, character.only = T)){\r\ninstall.packages(p)\r\n}\r\nlibrary(p,character.only = T)\r\n}\r\n\r\n\r\n\r\nTrying out OneMap API\r\n\r\n\r\nget_theme_status('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjc5NTgsInVzZXJfaWQiOjc5NTgsImVtYWlsIjoianVucGVuZy50ZW8uMjAxOUBzbXUuZWR1LnNnIiwiZm9yZXZlciI6ZmFsc2UsImlzcyI6Imh0dHA6XC9cL29tMi5kZmUub25lbWFwLnNnXC9hcGlcL3YyXC91c2VyXC9zZXNzaW9uIiwiaWF0IjoxNjMwODk2MTY4LCJleHAiOjE2MzEzMjgxNjgsIm5iZiI6MTYzMDg5NjE2OCwianRpIjoiYzBlNmJmNTg2OTVhOWJkOWE5NDU2MzFmOWI5YWY4YTIifQ._PeYQI2jiLSphQI_r5dzfzGbSCSPnZBW19_gOoENlvM', \"kindergartens\")\r\n\r\n\r\nUpdatedFile \r\n       TRUE \r\n\r\n\r\n\r\nsearch_themes('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjc5NTgsInVzZXJfaWQiOjc5NTgsImVtYWlsIjoianVucGVuZy50ZW8uMjAxOUBzbXUuZWR1LnNnIiwiZm9yZXZlciI6ZmFsc2UsImlzcyI6Imh0dHA6XC9cL29tMi5kZmUub25lbWFwLnNnXC9hcGlcL3YyXC91c2VyXC9zZXNzaW9uIiwiaWF0IjoxNjMwODk2MTY4LCJleHAiOjE2MzEzMjgxNjgsIm5iZiI6MTYzMDg5NjE2OCwianRpIjoiYzBlNmJmNTg2OTVhOWJkOWE5NDU2MzFmOWI5YWY4YTIifQ._PeYQI2jiLSphQI_r5dzfzGbSCSPnZBW19_gOoENlvM')\r\n\r\n\r\n# A tibble: 185 x 5\r\n   THEMENAME           QUERYNAME    ICON     CATEGORY  THEME_OWNER    \r\n   <chr>               <chr>        <chr>    <chr>     <chr>          \r\n 1 MCE KPE Speed Came~ mce_kpe_spe~ icon_en~ Community LAND TRANSPORT~\r\n 2 Singapore Police F~ spf_msc      SpeedCa~ Community SINGAPORE POLI~\r\n 3 Liquor Control Zon~ liquor_cont~ Crest_2~ Community SINGAPORE POLI~\r\n 4 Singapore Police F~ as_istana_c~ Crest_2~ Community SINGAPORE POLI~\r\n 5 Singapore Police F~ as_istana_b~ Crest_2~ Community SINGAPORE POLI~\r\n 6 Inland Ash Scatter~ ias          circle.~ Environm~ NATIONAL ENVIR~\r\n 7 Dengue (Cases) - N~ denguecase_~ Picture~ Health    NATIONAL ENVIR~\r\n 8 CET Centres         cetcentres   WSQ.jpg  Education SINGAPORE WORK~\r\n 9 HDB Branches        hdb_branches M0906.p~ Governme~ HOUSING AND DE~\r\n10 Licensed premises ~ customs_pet~ null     null      SINGAPORE CUST~\r\n# ... with 175 more rows\r\n\r\nImporting Geospatial Data\r\n\r\n\r\nsg_sf <- st_read(dsn = \"data/handson4data\", layer=\"CostalOutline\")\r\n\r\n\r\nReading layer `CostalOutline' from data source \r\n  `C:\\teojp3\\IS415_blog\\data\\handson4data' using driver `ESRI Shapefile'\r\nSimple feature collection with 60 features and 4 fields\r\nGeometry type: POLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\r\nProjected CRS: SVY21\r\n\r\nmpsz_sf <- st_read(dsn = \"data/handson4data\", layer = \"MP14_SUBZONE_WEB_PL\")\r\n\r\n\r\nReading layer `MP14_SUBZONE_WEB_PL' from data source \r\n  `C:\\teojp3\\IS415_blog\\data\\handson4data' using driver `ESRI Shapefile'\r\nSimple feature collection with 323 features and 15 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\r\nProjected CRS: SVY21\r\n\r\nImporting Aspatial Data\r\n\r\n\r\nchildcare <- read_rds(\"data/ice4data/rds/childcare.rds\")\r\nCHAS <- read_rds('data/ice4data/rds/CHAS.rds')\r\n\r\n\r\n\r\n\r\n\r\nCHAS_sf <- st_as_sf(CHAS,\r\n                    coords = c(\"X_COORDINATE\",\r\n                               \"Y_COORDINATE\"), crs = 3414)\r\n\r\n\r\n\r\n\r\n\r\nchildcare$lat <- as.numeric(childcare$Lat)\r\nchildcare$Lng <- as.numeric(childcare$Lng)\r\n\r\nchildcare_sf <- st_as_sf(childcare, coords = c(\"Lng\",\r\n                                               \"Lat\"),\r\n                         crs = 4326) %>%\r\n  st_transform(crs = 3414)\r\n\r\nmpsz_sf3414 <- st_transform(mpsz_sf, \r\n                              crs = 3414)\r\n\r\nsg_sf3414 <- st_transform(sg_sf, \r\n                              crs = 3414)\r\n\r\n\r\n\r\nGeospatial Data Wrangling\r\nConverting from sf to Spatial* Classes\r\n\r\n\r\nchildcare <- as_Spatial(childcare_sf)\r\nCHAS <- as_Spatial(CHAS_sf)\r\nmpsz <- as_Spatial(mpsz_sf3414)\r\nsg <- as_Spatial(sg_sf3414)\r\n\r\n\r\n\r\nConvering from Spatial* classes to sp format\r\n\r\n\r\nchildcare_sp <- as(childcare, \"SpatialPoints\")\r\nCHAS_sp <- as(CHAS, \"SpatialPoints\")\r\nsg_sp <- as(sg, \"SpatialPolygons\")\r\n\r\n\r\n\r\nConverting from sp to spatstat ppp format\r\n\r\n\r\nchildcare_ppp <- as(childcare_sp, \"ppp\")\r\nCHAS_ppp <- as(CHAS_sp, \"ppp\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-09-06T11:33:16+08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-08-30-in-class-exercise-3/",
    "title": "In-class Exercise 3",
    "description": "In this ICE, we learnt about the various approaches to analytical mapping.",
    "author": [
      {
        "name": "Teo Jun Peng",
        "url": "https://teojp3-is415.netlify.app/"
      }
    ],
    "date": "2021-08-31",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\nVisualising Extreme Values: Box Plot\r\n\r\n\r\nggplot(data=mpszpop2020, \r\n       aes(x = \"\", \r\n           y = AGED)) +\r\n  geom_boxplot()\r\n\r\n\r\n\r\n\r\nPercentile Map\r\nExtracting a variable from an sf data frame\r\n\r\n\r\nmpszpop2020a <- mpszpop2020 %>%\r\n  drop_na()\r\n\r\npercent <- c(0,.01,.1,.5,.9,.99,1)\r\nvar <- mpszpop2020a[\"DEPENDENCY\"] %>%\r\n  st_set_geometry(NULL)\r\nquantile(var[,1], percent)\r\n\r\n\r\n        0%         1%        10%        50%        90%        99% \r\n 0.0000000  0.0300000  0.5600000  0.7063063  0.8271605  1.2100000 \r\n      100% \r\n19.0000000 \r\n\r\nWriting Functions\r\nCreating the get.var function\r\n\r\n\r\nget.var <- function(vname,df) {\r\n  v <- df[vname] %>% \r\n    st_set_geometry(NULL)\r\n  v <- unname(v[,1])\r\n  return(v)\r\n}\r\n\r\n\r\n\r\nPlotting a percentile map using tmap functions\r\n\r\n\r\npercent <- c(0,.01,.1,.5,.9,.99,1)\r\nvar <- get.var(\"DEPENDENCY\", mpszpop2020a)\r\nbperc <- quantile(var,percent)\r\ntm_shape(mpszpop2020) +\r\n  tm_polygons() +\r\ntm_shape(mpszpop2020a) +\r\n  tm_fill(\"DEPENDENCY\",\r\n          title=\"DEPENDENCY\",\r\n          breaks=bperc,\r\n          palette=\"Blues\",\r\n          labels=c(\"< 1%\", \"1% - 10%\",\r\n                   \"10% - 50%\", \r\n                   \"50% - 90%\",\r\n                   \"90% - 99%\", \r\n                   \"> 99%\"))  +\r\n  tm_borders() +\r\n  tm_layout(title = \"Percentile Map\", \r\n            title.position = c(\"right\",\r\n                               \"bottom\"))\r\n\r\n\r\n\r\n\r\nA percentile Mapping Function\r\n\r\n\r\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\r\n  percent <- c(0,.01,.1,.5,.9,.99,1)\r\n  var <- get.var(vnam,df)\r\n  bperc <- quantile(var,percent)\r\n  tm_shape(mpszpop2020) +\r\n  tm_polygons() +\r\n  tm_shape(df) +\r\n     tm_fill(vnam,\r\n             title=legtitle,\r\n             breaks=bperc,\r\n             palette=\"Blues\",\r\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\r\n  tm_borders() +\r\n  tm_layout(title = mtitle, title.position = c(\"right\",\"bottom\"))\r\n}\r\n\r\n\r\n\r\nTrying out the function with AGED and YOUNG data\r\n\r\n\r\npercentmap(\"AGED\", mpszpop2020a)\r\n\r\n\r\n\r\n\r\n\r\n\r\npercentmap(\"YOUNG\", mpszpop2020a)\r\n\r\n\r\n\r\n\r\nAssigning the outputs as variables for easier exporting when necesssary\r\n\r\n\r\nagedmap <- percentmap(\"AGED\", mpszpop2020a)\r\nyoungmap <- percentmap(\"YOUNG\", mpszpop2020a)\r\n\r\n\r\n\r\nBox Map (AKA Map visualisation of box plot)\r\nCreating the boxbreaks function\r\n\r\n\r\nboxbreaks <- function(v,mult=1.5) {\r\n  qv <- unname(quantile(v))\r\n  iqr <- qv[4] - qv[2]\r\n  upfence <- qv[4] + mult * iqr\r\n  lofence <- qv[2] - mult * iqr\r\n  # initialize break points vector\r\n  bb <- vector(mode=\"numeric\",length=7)\r\n  # logic for lower and upper fences\r\n  if (lofence < qv[1]) {  # no lower outliers\r\n    bb[1] <- lofence\r\n    bb[2] <- floor(qv[1])\r\n  } else {\r\n    bb[2] <- lofence\r\n    bb[1] <- qv[1]\r\n  }\r\n  if (upfence > qv[5]) { # no upper outliers\r\n    bb[7] <- upfence\r\n    bb[6] <- ceiling(qv[5])\r\n  } else {\r\n    bb[6] <- upfence\r\n    bb[7] <- qv[5]\r\n  }\r\n  bb[3:5] <- qv[2:4]\r\n  return(bb)\r\n}\r\n\r\n\r\n\r\nCreating the get.var function and testing\r\n\r\n\r\nget.var <- function(vname,df) {\r\n  v <- df[vname] %>% st_set_geometry(NULL)\r\n  v <- unname(v[,1])\r\n  return(v)\r\n}\r\n\r\nmpszpop2020a <- mpszpop2020 %>%\r\n  filter(AGED>=0)\r\nvar <- get.var(\"AGED\", mpszpop2020a)\r\nboxbreaks(var)\r\n\r\n\r\n[1] -4362.5     0.0   505.0  2080.0  3750.0  8617.5 20240.0\r\n\r\nBoxmap Function\r\n\r\n\r\nboxmap <- function(vnam, df, \r\n                   legtitle=NA,\r\n                   mtitle=\"Box Map\",\r\n                   mult=1.5){\r\n  var <- get.var(vnam,df)\r\n  bb <- boxbreaks(var)\r\n  tm_shape(mpszpop2020) +\r\n     tm_fill(vnam,title=legtitle,\r\n             breaks=bb,\r\n             palette=\"Blues\",\r\n          labels = c(\"lower outlier\", \r\n                     \"< 25%\", \r\n                     \"25% - 50%\", \r\n                     \"50% - 75%\",\r\n                     \"> 75%\", \r\n                     \"upper outlier\"))  +\r\n  tm_borders() +\r\n  tm_layout(title = mtitle, \r\n            title.position = c(\"right\",\r\n                               \"bottom\"))\r\n}\r\n\r\n\r\n\r\nBox Map of AGED population\r\n\r\n\r\nboxmap(\"ECONOMY ACTIVE\", mpszpop2020a)\r\n\r\n\r\n\r\n\r\nRaw rate map\r\nTo address biasness like huge differences in the overall population etc. Using raw rate map would make a more comprehensive analysis\r\n\r\n\r\nmpszpop2020a <- mpszpop2020 %>%\r\n  mutate(`AGED%` = (`AGED`\r\n/`TOTAL`)*100) %>%\r\n  filter(`AGED%` >= 0)\r\n\r\n\r\n\r\n\r\n\r\nvar <- get.var(\"AGED%\", mpszpop2020a)\r\nboxbreaks(var)\r\n\r\n\r\n[1] -2.367018  0.000000 11.271651 16.202946 20.364098 34.002767\r\n[7] 95.000000\r\n\r\nboxmap(\"AGED\",mpszpop2020a)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-30-in-class-exercise-3/in-class-exercise-3_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2021-08-30T19:37:49+08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-08-30-hands-on-ex03/",
    "title": "Hands-on Exercise 3",
    "description": "In this hands-on exercise, we learnt how to plot functional and truthful choropleth maps by using an R package called tmap package.",
    "author": [
      {
        "name": "Teo Jun Peng",
        "url": "https://teojp3-is415.netlify.app/"
      }
    ],
    "date": "2021-08-29",
    "categories": [],
    "contents": "\r\nGetting started\r\nThis code chunk create a list of R packages needed.\r\n\r\n\r\npackages = c('sf', 'tmap', 'tidyverse', 'readr')\r\nfor (p in packages){\r\n  if(!require(p, character.only = T)){\r\n    install.packages(p)\r\n  }\r\n  library(p,character.only = T)\r\n}\r\n\r\n\r\n\r\nImporting Data into R\r\nThe code chunk below uses the st_read() function of sf package to import “MP14_SUBZONE_WEB_PL” shapefile into R as a simple feature data frame called mpsz.\r\n\r\n\r\nmpsz <- st_read(dsn = \"data/handson3data/geospatial\", \r\n                layer = \"MP14_SUBZONE_WEB_PL\")\r\n\r\n\r\nReading layer `MP14_SUBZONE_WEB_PL' from data source \r\n  `C:\\teojp3\\IS415_blog\\data\\handson3data\\geospatial' \r\n  using driver `ESRI Shapefile'\r\nSimple feature collection with 323 features and 15 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\r\nProjected CRS: SVY21\r\n\r\n\r\n\r\nmpsz\r\n\r\n\r\nSimple feature collection with 323 features and 15 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\r\nProjected CRS: SVY21\r\nFirst 10 features:\r\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND\r\n1         1          1    MARINA SOUTH    MSSZ01      Y\r\n2         2          1    PEARL'S HILL    OTSZ01      Y\r\n3         3          3       BOAT QUAY    SRSZ03      Y\r\n4         4          8  HENDERSON HILL    BMSZ08      N\r\n5         5          3         REDHILL    BMSZ03      N\r\n6         6          7  ALEXANDRA HILL    BMSZ07      N\r\n7         7          9   BUKIT HO SWEE    BMSZ09      N\r\n8         8          2     CLARKE QUAY    SRSZ02      Y\r\n9         9         13 PASIR PANJANG 1    QTSZ13      N\r\n10       10          7       QUEENSWAY    QTSZ07      N\r\n        PLN_AREA_N PLN_AREA_C       REGION_N REGION_C\r\n1     MARINA SOUTH         MS CENTRAL REGION       CR\r\n2           OUTRAM         OT CENTRAL REGION       CR\r\n3  SINGAPORE RIVER         SR CENTRAL REGION       CR\r\n4      BUKIT MERAH         BM CENTRAL REGION       CR\r\n5      BUKIT MERAH         BM CENTRAL REGION       CR\r\n6      BUKIT MERAH         BM CENTRAL REGION       CR\r\n7      BUKIT MERAH         BM CENTRAL REGION       CR\r\n8  SINGAPORE RIVER         SR CENTRAL REGION       CR\r\n9       QUEENSTOWN         QT CENTRAL REGION       CR\r\n10      QUEENSTOWN         QT CENTRAL REGION       CR\r\n            INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\r\n1  5ED7EB253F99252E 2014-12-05 31595.84 29220.19   5267.381\r\n2  8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05   3506.107\r\n3  C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66   1740.926\r\n4  3775D82C5DDBEFBD 2014-12-05 26782.83 29933.77   3313.625\r\n5  85D9ABEF0A40678F 2014-12-05 26201.96 30005.70   2825.594\r\n6  9D286521EF5E3B59 2014-12-05 25358.82 29991.38   4428.913\r\n7  7839A8577144EFE2 2014-12-05 27680.06 30230.86   3275.312\r\n8  48661DC0FBA09F7A 2014-12-05 29253.21 30222.86   2208.619\r\n9  1F721290C421BFAB 2014-12-05 22077.34 29893.78   6571.323\r\n10 3580D2AFFBEE914C 2014-12-05 24168.31 30104.18   3454.239\r\n   SHAPE_Area                       geometry\r\n1   1630379.3 MULTIPOLYGON (((31495.56 30...\r\n2    559816.2 MULTIPOLYGON (((29092.28 30...\r\n3    160807.5 MULTIPOLYGON (((29932.33 29...\r\n4    595428.9 MULTIPOLYGON (((27131.28 30...\r\n5    387429.4 MULTIPOLYGON (((26451.03 30...\r\n6   1030378.8 MULTIPOLYGON (((25899.7 297...\r\n7    551732.0 MULTIPOLYGON (((27746.95 30...\r\n8    290184.7 MULTIPOLYGON (((29351.26 29...\r\n9   1084792.3 MULTIPOLYGON (((20996.49 30...\r\n10   631644.3 MULTIPOLYGON (((24472.11 29...\r\n\r\nImporting Attribute Data into R\r\nThe read_csv() function will change the imported .csv file into an R dataframe\r\n\r\n\r\npopdata <- read_csv(\"data/handson3data/aspatial/respopagesexfa2011to2020.csv\")\r\n\r\n\r\n\r\nData Preparation and Wrangling\r\nPreparing the data for use in the choropleth maps\r\n\r\n\r\npopdata2020 <- popdata %>%\r\n  filter(Time == 2020) %>%\r\n  group_by(PA, SZ, AG) %>%\r\n  summarise(`POP` = sum(`Pop`)) %>%\r\n  ungroup()%>%\r\n  pivot_wider(names_from=AG, \r\n              values_from=POP) %>%\r\n  mutate(YOUNG = rowSums(.[3:6])\r\n         +rowSums(.[12])) %>%\r\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\r\nrowSums(.[13:15]))%>%\r\nmutate(`AGED`=rowSums(.[16:21])) %>%\r\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \r\nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\r\n/`ECONOMY ACTIVE`) %>%\r\n  select(`PA`, `SZ`, `YOUNG`, \r\n       `ECONOMY ACTIVE`, `AGED`, \r\n       `TOTAL`, `DEPENDENCY`)\r\n\r\n\r\n\r\n\r\n\r\npopdata2020 <- popdata2020 %>%\r\n  mutate_at(.vars = vars(PA, SZ), \r\n          .funs = funs(toupper)) %>%\r\n  filter(`ECONOMY ACTIVE` > 0)\r\n\r\n\r\n\r\n\r\n\r\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\r\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\r\n\r\n\r\n\r\n\r\n\r\nmpszpop2020 <- write_rds(mpsz_pop2020, \"data/handson3data/rds/mpszpop2020.rds\")\r\n\r\n\r\n\r\nExamples of Choropleth Mapping with Geospatial Data Using tmap\r\nTrying out various approaches to prepare thematic maps\r\n\r\n\r\ntmap_mode(\"plot\")\r\nqtm(mpsz_pop2020, \r\n    fill = \"DEPENDENCY\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"quantile\", \r\n          palette = \"Blues\",\r\n          title = \"Dependency ratio\") +\r\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\r\n            main.title.position = \"center\",\r\n            main.title.size = 1.2,\r\n            legend.height = 0.45, \r\n            legend.width = 0.35,\r\n            frame = TRUE) +\r\n  tm_borders(alpha = 0.5) +\r\n  tm_compass(type=\"8star\", size = 2) +\r\n  tm_scale_bar() +\r\n  tm_grid(alpha =0.2) +\r\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \r\n             position = c(\"left\", \"bottom\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020) +\r\n  tm_polygons()\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_polygons(\"DEPENDENCY\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\") +\r\n  tm_borders(lwd = 0.1,  alpha = 1)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          n = 5,\r\n          style = \"jenks\") +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          n = 5,\r\n          style = \"equal\") +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\nsummary(mpsz_pop2020$DEPENDENCY)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n 0.0000  0.6540  0.7063  0.7712  0.7657 19.0000      92 \r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          n = 6,\r\n          style = \"quantile\",\r\n          palette = \"Blues\") +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          style = \"quantile\",\r\n          palette = \"-Greens\") +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"jenks\", \r\n          palette = \"Blues\", \r\n          legend.hist = TRUE, \r\n          legend.is.portrait = TRUE,\r\n          legend.hist.z = 0.1) +\r\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\r\n            main.title.position = \"center\",\r\n            main.title.size = 1,\r\n            legend.height = 0.45, \r\n            legend.width = 0.35,\r\n            legend.outside = FALSE,\r\n            legend.position = c(\"right\", \"bottom\"),\r\n            frame = FALSE) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"quantile\", \r\n          palette = \"-Greens\") +\r\n  tm_borders(alpha = 0.5) +\r\n  tmap_style(\"classic\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"quantile\", \r\n          palette = \"Blues\",\r\n          title = \"No. of persons\") +\r\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\r\n            main.title.position = \"center\",\r\n            main.title.size = 1.2,\r\n            legend.height = 0.45, \r\n            legend.width = 0.35,\r\n            frame = TRUE) +\r\n  tm_borders(alpha = 0.5) +\r\n  tm_compass(type=\"8star\", size = 2) +\r\n  tm_scale_bar(width = 0.15) +\r\n  tm_grid(lwd = 0.1, alpha = 0.2) +\r\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \r\n             position = c(\"left\", \"bottom\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\ntmap_style(\"white\")\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(c(\"YOUNG\", \"AGED\"),\r\n          style = \"equal\", \r\n          palette = \"Blues\") +\r\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\r\n  tm_borders(alpha = 0.5) +\r\n  tmap_style(\"white\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+ \r\n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\r\n          style = c(\"equal\", \"quantile\"), \r\n          palette = list(\"Blues\",\"Greens\")) +\r\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020) +\r\n  tm_fill(\"DEPENDENCY\",\r\n          style = \"quantile\",\r\n          palette = \"Blues\",\r\n          thres.poly = 0) + \r\n  tm_facets(by=\"REGION_N\", \r\n            free.coords=TRUE, \r\n            drop.shapes=TRUE) +\r\n  tm_layout(legend.show = FALSE,\r\n            title.position = c(\"center\", \"center\"), \r\n            title.size = 20) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\nyoungmap <- tm_shape(mpsz_pop2020)+ \r\n  tm_polygons(\"YOUNG\", \r\n              style = \"quantile\", \r\n              palette = \"Blues\")\r\n\r\nagedmap <- tm_shape(mpsz_pop2020)+ \r\n  tm_polygons(\"AGED\", \r\n              style = \"quantile\", \r\n              palette = \"Blues\")\r\n\r\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"quantile\", \r\n          palette = \"Blues\", \r\n          legend.hist = TRUE, \r\n          legend.is.portrait = TRUE,\r\n          legend.hist.z = 0.1) +\r\n  tm_layout(legend.outside = TRUE,\r\n            legend.height = 0.45, \r\n            legend.width = 5.0,\r\n            legend.position = c(\"right\", \"bottom\"),\r\n            frame = FALSE) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-30-hands-on-ex03/hands-on-ex03_files/figure-html5/unnamed-chunk-9-1.png",
    "last_modified": "2021-08-30T16:43:01+08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-08-23-in-class-exercise-2/",
    "title": "In-class Exercise 2",
    "description": "In this hands-on exercise, I learnt how to handle geospatial data in R by using sf package.",
    "author": [
      {
        "name": "Teo Jun Peng",
        "url": "https://teojp3-is415.netlify.app/"
      }
    ],
    "date": "2021-08-23",
    "categories": [],
    "contents": "\r\nGetting Started\r\nThis code chunk performs three tasks:\r\ncreate a list of R packages needed.\r\n\r\n\r\npackages <- c('sf', 'tidyverse') \r\nfor(p in packages){\r\n  if(!require(p, character.only = T)){\r\n    install.packages(p)\r\n  }\r\n  library(p, character.only = T)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-08-24T14:03:48+08:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Introduction",
    "description": "Welcome to my personal workspace! The content listed on the blog will mainly be related to Geospatial Analytics, a module I'm currently taking this semester.",
    "author": [
      {
        "name": "Teo Jun Peng",
        "url": "https://teojp3-is415.netlify.app/"
      }
    ],
    "date": "2021-08-23",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-08-30T13:14:49+08:00",
    "input_file": {}
  }
]

[
  {
    "path": "posts/2021-08-27-take-home-exercise-1/",
    "title": "Take Home Exercise 1",
    "description": "Analysing and Visualising Spatio-temporal Patterns of COVID-19 in DKI Jakarta, Indonesia.",
    "author": [
      {
        "name": "Teo Jun Peng",
        "url": "https://teojp3-is415.netlify.app/"
      }
    ],
    "date": "2021-09-09",
    "categories": [],
    "contents": "\r\n1. Introduction\r\nThis analysis aims to analyse and visualise spatio-temporal patterns of COVID-19 in DKI Jakarta, Indonesia. Out of 34 provinces in Indonesia, DKI Jakarta was the province affected most by the pandemic, with close to 24% of cumulative confirmed cases. However, the cumulative confirmed cases were not evenly distributed, therefore this analysis intends to unravel which sub-districts had the highest number of cases and how time has changed the overall distribution.\r\nTHE DATA\r\nFor this analysis, the following data are used:\r\nOpen Data Covid-19 Provinsi DKI Jakarta. This portal provides daily update of COVID-19 measures at both sub-district and district level. For the purpose of this analysis, data at the sub-district level is used. The datasets are in .CSV format, and monthly datasets from March 2020 to July 2021 will be used.\r\nIndonesia Geospatial. This portal provides a comprehensive collection of geospatial data mainly in ESRI shapefile format at different geographical levels. For the purpose of this analysis, the Shapefile (SHP) Batas Desa Provinsi DKI Jakarta provided at PODES 2019 geospatial layer is used.\r\n2. Setting up the environment\r\nR packages will be used for efficiency and a more comprehensive analysis, such as tidyverse and sf etc.\r\n\r\n\r\nload(\"THE1_workspace.Rdata\")\r\npackages = c('tidyverse', 'sf', 'readxl', 'readr', 'stringr', 'tmap')\r\nfor (p in packages)\r\n  {\r\n  if(!require(p, character.only = T))\r\n    {\r\n    install.packages(p)\r\n  }\r\n  library(p,character.only = T)\r\n}\r\n\r\n\r\n\r\n3. Data Wrangling\r\nImporting aspatial Data\r\nList.files helps to create a list from the imported data files. The files are also imported all at once using a pattern to match the file names, ensuring full efficiency as compared to importing the files individually. The R function lapply is also complementary for this process, as well as adding the file names as an additional column to the dataframes (So as to display the data by month later on).\r\n\r\n\r\nfile_list <- list.files(path = \"data/the1data/COVID-DATA\" , pattern = \"*.xlsx\",  full.names = T)\r\ndf_list <- lapply(seq_along(file_list), function(x) transform(read_xlsx(file_list[x]), MonthYear = file_list[x]))\r\n\r\n\r\n\r\nFrom here we then manually check through df_list to find which Meninggal column is the correct one for each file, for referencing the coalesce process later on in the next few steps (E.g. For February 2021, Meninggal…1 is the correct column to use since it is the Meninggal column with no NA values.) The inspection tells us that Meninggal…23 to Meninggal…25 is not used so we can skip those columns later on in the coalesce process.\r\n\r\n\r\ndf_list\r\n\r\n\r\n\r\nWe will now combine df_list into a real dataframe using Idlpy function from the plyr package.\r\n\r\n\r\nlibrary(plyr)\r\ndf <- ldply(df_list, data.frame)\r\n\r\n\r\n\r\nTo combine/integrate values from the various Meninggal columns, we will have to convert Meninggal…26 column’s data type so we can use coalesce function later on (because it originally is a chr type and chr type cannot combine with double type). July 2020 is using Meninggal…26 as the correct column, so we have to carry out the conversion.\r\n\r\n\r\ndf$Meninggal...26 = as.double(df$Meninggal...26)\r\n\r\ndf <- df %>%\r\n  na_if(\"N/A\")\r\n\r\n\r\n\r\nIn this step we aim to combine ID_KEL into one main column, since some of the files have different layouts. Coalesce is a function to take in values from another column, (So if ID_KEL has NA values while ID_KEL…1 has values, we will take from ID_KEL…1 and add them into ID_KEL)\r\n\r\n\r\ndf <- df %>% \r\n  mutate(ID_KEL = coalesce(ID_KEL, ID_KEL...1, ID_KEL...2))\r\n\r\n\r\n\r\nCOMBINE MENNINGGAL TGT AS ONE COLUMN, SINCE SOME OF THE FILES HAVE DIFFERENT LAYOUTS, only 28,29,30,31 is used after checking the dataset earlier on during “df_list”. So only combining those columns\r\n\r\n\r\ndf <- df %>% \r\n  mutate(Meninggal = coalesce(Meninggal, Meninggal...28, Meninggal...29, Meninggal...30, Meninggal...31, Meninggal...26))\r\n\r\n\r\n\r\nTo get only the required columns from the dataframe\r\n\r\n\r\nlibrary(dplyr)\r\n\r\ndf2 <- df %>%\r\n  select(\"MonthYear\", \"ID_KEL\", \"Nama_provinsi\", \"nama_kota\", \"nama_kecamatan\", \"nama_kelurahan\", \"POSITIF\", \"Meninggal\")\r\n\r\n\r\n\r\nAs shown above, we need to clean up the MonthYear column as it is very messy. We will clean up the MonthYear column using Str_replace function, to replace unnecessary characters in the values.\r\n\r\n\r\ndf2 <- df2 %>% \r\n  mutate_at(\"MonthYear\", str_replace, \"data/the1data/COVID-DATA/Standar Kelurahan Data Corona\", \"\")\r\n\r\ndf2 <- df2 %>% \r\n  mutate_at(\"MonthYear\", str_replace, \"[(]\", \"\")\r\n\r\ndf2 <- df2 %>% \r\n  mutate_at(\"MonthYear\", str_replace, \"[)]\", \"\")\r\n\r\ndf2 <- df2 %>% \r\n  mutate_at(\"MonthYear\", str_replace, \".xlsx\", \"\")\r\n\r\n\r\n\r\nTurning MonthYear column into legit date type and removing Date from the MonthYear values (e.g. 2021-02-28 into 2021-02)\r\n\r\n\r\nSys.setlocale(locale=\"ind\")\r\n\r\n\r\n[1] \"LC_COLLATE=Indonesian_Indonesia.1252;LC_CTYPE=Indonesian_Indonesia.1252;LC_MONETARY=Indonesian_Indonesia.1252;LC_NUMERIC=C;LC_TIME=Indonesian_Indonesia.1252\"\r\n\r\ndf2$MonthYear <- c(df2$MonthYear) %>%\r\nas.Date(df2$MonthYear, format =\"%d %B %Y\")\r\n\r\n\r\n\r\nDELETE AWAY WRONG/UNNECESSARY ROWS (NA values in ID_KEL, THE TOTALS, SUBDISTRICT NAME AS ID_KEL ETC)\r\n\r\n\r\ndf2[!is.na(df2$ID_KEL),]\r\n\r\ndf2 <- subset(df2, grepl('^\\\\d+$', df2$ID_KEL))\r\n\r\n\r\n\r\nOrder Dataframe by MonthYear and reset index\r\n\r\n\r\ndf2 <- df2[order(df2$MonthYear),]\r\nfinal_df <- df2\r\nrow.names(final_df) <- 1:nrow(final_df)\r\n\r\n\r\n\r\nWriting out a .rds file from final_df, so as to ensure the data will take up lesser storage space.\r\n\r\n\r\naspatial_df <- write_rds(final_df, \"data/the1data/rds/aspatial_df.rds\")\r\n\r\n\r\n\r\n\r\n\r\naspatial_df <- read_rds(\"data/the1data/rds/aspatial_df.rds\")\r\n\r\n\r\n\r\n3. Importing Geospatial Data\r\nThe following code cunk imports the DKI Jakarta geospatial data into R as a simple feature dataframe.\r\n\r\n\r\ngeospatial_df <- st_read(dsn = \"data/the1data/BATAS DESA DESEMBER 2019 DUKCAPIL DKI JAKARTA\", \r\n                layer = \"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\")\r\n\r\n\r\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source `C:\\teojp3\\IS415_blog\\data\\the1data\\BATAS DESA DESEMBER 2019 DUKCAPIL DKI JAKARTA' \r\n  using driver `ESRI Shapefile'\r\nSimple feature collection with 269 features and 161 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\r\nGeodetic CRS:  WGS 84\r\n\r\nChecking if the CRS is correct or wrong\r\n\r\n\r\nst_crs(geospatial_df)\r\n\r\n\r\nCoordinate Reference System:\r\n  User input: WGS 84 \r\n  wkt:\r\nGEOGCRS[\"WGS 84\",\r\n    DATUM[\"World Geodetic System 1984\",\r\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\r\n            LENGTHUNIT[\"metre\",1]]],\r\n    PRIMEM[\"Greenwich\",0,\r\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\r\n    CS[ellipsoidal,2],\r\n        AXIS[\"latitude\",north,\r\n            ORDER[1],\r\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\r\n        AXIS[\"longitude\",east,\r\n            ORDER[2],\r\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\r\n    ID[\"EPSG\",4326]]\r\n\r\nFrom the above output, we see that the Projected Coordinates System iS WGS84 which is wrong, therefore we’ll Change the Projected Coordinates Systems to DGN95 (which is the national Projeted Coordinates Systems of Indonesia).\r\n\r\n\r\njakarta_DGN95 <- st_transform(geospatial_df, 23845)\r\n\r\n\r\n\r\nOuter Islands are also known as KEPULAUAN SERIBU, we will exclude them as they are detached from the mainland.\r\n\r\n\r\njakarta_DGN95 <- subset(jakarta_DGN95, KAB_KOTA != \"KEPULAUAN SERIBU\")\r\n\r\n\r\n\r\nFor the analysis, we will only keep the first nine fields, whereby the last field is JUMLAH_PEN (Total Population).\r\n\r\n\r\njakarta_DGN95 <- jakarta_DGN95[, 0:9]\r\n\r\n\r\n\r\nCleaning data from jakarta_df, uncovered some inaccuracy between identification keys from aspatial and geospatial after manually checking through their data. If data cleaning is not done, there will be data missing from some states, so the map will have missing values.\r\n\r\n\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'BALEKAMBANG'] <- 'BALE KAMBANG'\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'HALIM PERDANA KUSUMA'] <- 'HALIM PERDANA KUSUMAH'\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'JATIPULO'] <- 'JATI PULO'\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'KALIBARU'] <- 'KALI BARU'\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'KRAMATJATI'] <- 'KRAMAT JATI'\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'PALMERIAM'] <- 'PAL MERIAM'\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'PINANGRANTI'] <- 'PINANG RANTI'\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'PAL MERAH'] <- 'PALMERAH'\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'TENGAH'] <- 'KAMPUNG TENGAH'\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'PULOGADUNG'] <- 'PULO GADUNG'\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'KALI DERES'] <- 'KALIDERES'\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'RAWAJATI'] <- 'RAWA JATI'\r\njakarta_DGN95$DESA_KELUR[jakarta_DGN95$DESA == 'KRENDANG'] <- 'KERENDANG'\r\n\r\n\r\n\r\nFunction to help us check if the identifier keys between the aspatial and geospatial data are correct\r\n\r\n\r\na <-c(aspatial_df$nama_kelurahan)\r\nb <-c(jakarta_DGN95$DESA_KELUR)\r\n\r\na[!(a %in% b)]\r\n\r\n\r\n\r\nWe will drop NA value rows\r\n\r\n\r\njakarta_DGN95 <- jakarta_DGN95 %>% drop_na(OBJECT_ID)\r\n\r\n\r\n\r\nDATA PREPARATION FOR CUML CASE RATE\r\n\r\n\r\nCase_Rate <- aspatial_df %>%\r\n  inner_join(jakarta_DGN95, by=c(\"nama_kelurahan\" = \"DESA_KELUR\")) %>%\r\n  group_by(nama_kelurahan, MonthYear) %>%\r\n  dplyr::summarise(`Covid_Cases_Per_10000_Pop` = (((sum(`POSITIF`)) / (`JUMLAH_PEN`)) / 10000)) %>%\r\n  ungroup() %>%\r\n  pivot_wider(names_from = MonthYear,\r\n              values_from = Covid_Cases_Per_10000_Pop)\r\n\r\n\r\n\r\nDATA PREPARATION FOR CUML DEATH RATE\r\n\r\n\r\nDeath_Rate <- aspatial_df %>%\r\n  inner_join(jakarta_DGN95, by=c(\"nama_kelurahan\" = \"DESA_KELUR\")) %>%\r\n  group_by(nama_kelurahan, MonthYear) %>%\r\n  dplyr::summarise(`Death_Rate_Per_10000` = (sum(Meninggal) / (JUMLAH_PEN / 10000))) %>%\r\n  ungroup() %>%\r\n  pivot_wider(names_from = MonthYear,\r\n              values_from = Death_Rate_Per_10000)\r\n\r\n\r\n\r\nData Preparation for Relative Risk mapping later on\r\n\r\n\r\nPositive_Cases <- aspatial_df %>%\r\n  select('MonthYear', 'nama_kelurahan', 'POSITIF', 'Meninggal')\r\n\r\n\r\n\r\n\r\n\r\nPositive_Cases <- Positive_Cases[Positive_Cases$MonthYear == \"2021-07-31\",]\r\n\r\n\r\n\r\n\r\n\r\nDeath_Rate <- left_join(Positive_Cases, Death_Rate, by= c(\"nama_kelurahan\" = \"nama_kelurahan\"))\r\n\r\nDeath_Rate <- subset(Death_Rate, select = -c(MonthYear))\r\n\r\n\r\n\r\nRenaming of Columns\r\n\r\n\r\ncolnames(Case_Rate) <- c('SUB_DISTRICT', '03-2020', '04-2020', '05-2020', '06-2020', '07-2020', '08-2020', '09-2020', '10-2020', '11-2020', '12-2020', '01-2021', '02-2021', '03-2021', '04-2021', '05-2021', '06-2021', '07-2021')\r\n\r\ncolnames(Death_Rate) <- c('SUB_DISTRICT', 'POSITIVE_CASES', 'DEATHS', '03-2020', '04-2020', '05-2020', '06-2020', '07-2020', '08-2020', '09-2020', '10-2020', '11-2020', '12-2020', '01-2021', '02-2021', '03-2021', '04-2021', '05-2021', '06-2021', '07-2021')\r\n\r\n\r\n\r\nQuick check to ensure there are no NA values\r\n\r\n\r\nCase_Rate[rowSums(is.na(Case_Rate))!=0,]\r\n\r\n\r\n\r\nDeath_Rate has NA rows, deleted them using na.omit() function\r\n\r\n\r\nDeath_Rate[rowSums(is.na(Death_Rate))!=0,]\r\n\r\nDeath_Rate <- na.omit(Death_Rate)\r\n\r\n\r\n\r\nUsing rds files instead\r\n\r\n\r\nCase_Rate_rds <- write_rds(Case_Rate, \"data/the1data/rds/Case_Rate_rds.rds\")\r\nDeath_Rate_rds <- write_rds(Death_Rate, \"data/the1data/rds/Death_Rate_rds.rds\")\r\n\r\n\r\n\r\n\r\n\r\nCase_Rate_rds <- read_rds(\"data/the1data/rds/Case_Rate_rds.rds\")\r\nDeath_Rate_rds <- read_rds(\"data/the1data/rds/Death_Rate_rds.rds\")\r\n\r\n\r\n\r\nGEOSPATIAL ANALYSIS\r\nGeorelational join (Geospatial data with Aspatial data)\r\n\r\n\r\nCase_Rate_Final <- left_join(jakarta_DGN95, Case_Rate_rds, by= c(\"DESA_KELUR\" = \"SUB_DISTRICT\"))\r\n\r\n\r\n\r\n\r\n\r\nDeath_Rate_Final <- left_join(jakarta_DGN95, Death_Rate_rds, by= c(\"DESA_KELUR\" = \"SUB_DISTRICT\"))\r\n\r\nDeath_Rate_Final[rowSums(is.na(Death_Rate_Final))!=0,]\r\n\r\n\r\nSimple feature collection with 0 features and 28 fields\r\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\r\nProjected CRS: DGN95 / Indonesia TM-3 zone 54.1\r\n [1] OBJECT_ID      KODE_DESA      DESA           KODE          \r\n [5] PROVINSI       KAB_KOTA       KECAMATAN      DESA_KELUR    \r\n [9] JUMLAH_PEN     POSITIVE_CASES DEATHS         03-2020       \r\n[13] 04-2020        05-2020        06-2020        07-2020       \r\n[17] 08-2020        09-2020        10-2020        11-2020       \r\n[21] 12-2020        01-2021        02-2021        03-2021       \r\n[25] 04-2021        05-2021        06-2021        07-2021       \r\n[29] geometry      \r\n<0 rows> (or 0-length row.names)\r\n\r\nGEOSPATIAL MAPPING\r\n\r\n\r\nsummary(Case_Rate_Final$`03-2020`)\r\n\r\n\r\n          Min.        1st Qu.         Median           Mean \r\n0.000000000000 0.000000000000 0.000000003264 0.000000007609 \r\n       3rd Qu.           Max. \r\n0.000000006928 0.000000498826 \r\n\r\nPlotting multiple small choropleth maps (KAB = District Level, Kota = Subdistrict). So March 2020 is the first month that we have data on. From the plotted map, we can see that there is an even distribution throughout the different districts (no particular district with outlandish number of cases)\r\n\r\n\r\ntm_shape(Case_Rate_Final) +\r\n  tm_fill(\"03-2020\",\r\n          style = 'quantile',\r\n          palette = \"Blues\",\r\n          thres.poly = 0) + \r\n  tm_facets(by=\"KAB_KOTA\", \r\n            free.coords=TRUE, \r\n            drop.shapes=TRUE) +\r\n  tm_layout(legend.show = TRUE,\r\n            main.title = 'Distribution of cumulative confirmed cases\\nrate per 10,000 Population (March 2020)',\r\n            main.title.position = \"centre\", \r\n            title.size = 12) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\nsummary(Death_Rate_Final$`03-2020`)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n0.00000 0.00000 0.00000 0.08094 0.00000 3.05344 \r\n\r\n\r\n\r\ntm_shape(Death_Rate_Final) +\r\n  tm_fill(\"03-2020\",\r\n          style = \"jenks\",\r\n          palette = \"Blues\",\r\n          thres.poly = 0) + \r\n  tm_facets(by=\"KAB_KOTA\", \r\n            free.coords=TRUE, \r\n            drop.shapes=TRUE) +\r\n  tm_layout(legend.show = TRUE,\r\n            main.title = 'Distribution of cumulative death rate\\nper 10,000 Population (March 2020)',\r\n            main.title.position = \"centre\", \r\n            title.size = 12) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\nNORMAL MAINLAND MAP\r\n\r\n\r\ntm_shape(Case_Rate_Final)+\r\n  tm_fill(\"07-2021\", \r\n          style = \"quantile\", \r\n          palette = \"Blues\",\r\n          title = \"Cumulative Case Rate\") +\r\n  tm_layout(main.title = \"Cumulative Confirmed Case Rate in July 2021\",\r\n            main.title.position = \"center\",\r\n            main.title.size = 1.2,\r\n            legend.outside = TRUE,\r\n            legend.height = 0.45, \r\n            legend.width = 0.35,\r\n            frame = TRUE) +\r\n  tm_borders(alpha = 0.5) +\r\n  tm_compass(type=\"8star\", size = 2, position = c( 'left','bottom')) +\r\n  tm_scale_bar(position = c( 'left','bottom')) +\r\n  tm_grid(alpha =0.2) \r\n\r\n\r\n\r\n\r\nTO PLOT MAPS SIDE BY SIDE FOR COMPARISON\r\n\r\n\r\ntm_shape(Case_Rate_Final)+ \r\n  tm_polygons(c(\"03-2020\",\"07-2021\"),\r\n          style = \"quantile\", \r\n          palette = \"Blues\") +\r\n  tm_layout(legend.position = c(\"left\", \"bottom\"))\r\n\r\n\r\n\r\n\r\nTHEMATIC MAPPING\r\nPERCENTILE MAP????\r\n\r\n\r\npercent <- c(0,.01,.1,.5,.9,.99,1)\r\nvar <- Case_Rate_Final[\"07-2021\"] %>%\r\n  st_set_geometry(NULL)\r\nquantile(var[,1], percent)\r\n\r\n\r\n            0%             1%            10%            50% \r\n0.000001873189 0.000002862999 0.000004581759 0.000006583395 \r\n           90%            99%           100% \r\n0.000009396568 0.000019660003 0.000038082902 \r\n\r\n\r\n\r\nget.var <- function(vname,df) {\r\n  v <- df[vname] %>% \r\n    st_set_geometry(NULL)\r\n  v <- unname(v[,1])\r\n  return(v)\r\n}\r\n\r\n\r\n\r\n\r\n\r\npercent <- c(0,.01,.1,.5,.9,.99,1)\r\nvar <- get.var(\"07-2021\", Case_Rate_Final)\r\nbperc <- quantile(var,percent)\r\ntm_shape(jakarta_DGN95) +\r\n  tm_polygons() +\r\ntm_shape(Case_Rate_Final) +\r\n  tm_fill(\"07-2021\",\r\n          title=\"07-2021\",\r\n          breaks=bperc,\r\n          palette=\"Blues\",\r\n          labels=c(\"< 1%\", \"1% - 10%\",\r\n                   \"10% - 50%\", \r\n                   \"50% - 90%\",\r\n                   \"90% - 99%\", \r\n                   \"> 99%\"))  +\r\n  tm_borders() +\r\n  tm_layout(title = \"Percentile Map\", \r\n            title.position = c(\"right\",\r\n                               \"bottom\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\r\n  percent <- c(0,.01,.1,.5,.9,.99,1)\r\n  var <- get.var(vnam,df)\r\n  bperc <- quantile(var,percent)\r\n  tm_shape(jakarta_DGN95) +\r\n  tm_polygons() +\r\n  tm_shape(df) +\r\n     tm_fill(vnam,\r\n             title=legtitle,\r\n             breaks=bperc,\r\n             palette=\"Blues\",\r\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\r\n  tm_borders() +\r\n  tm_layout(main.title = \"Cumulative Confirmed Case Rate in July 2021\",\r\n            main.title.position = \"center\",\r\n            main.title.size = 1.2,\r\n            legend.outside = TRUE,\r\n            legend.height = 0.45, \r\n            legend.width = 0.35,\r\n            frame = TRUE) +\r\n  tm_compass(type=\"8star\", size = 2, position = c( 'left','bottom')) +\r\n  tm_scale_bar(position = c( 'left','bottom'))\r\n}\r\n\r\n\r\n\r\n\r\n\r\nCR_July2021_percentmap <- percentmap(\"07-2021\", Case_Rate_Final)\r\nCR_March2020_percentmap <- percentmap(\"03-2020\", Case_Rate_Final)\r\n\r\n\r\n\r\n\r\n\r\nCR_March2020_percentmap\r\n\r\n\r\n\r\n\r\nBOXBREAKS BOX MAP????\r\n\r\n\r\nboxbreaks <- function(v,mult=1.5) {\r\n  qv <- unname(quantile(v))\r\n  iqr <- qv[4] - qv[2]\r\n  upfence <- qv[4] + mult * iqr\r\n  lofence <- qv[2] - mult * iqr\r\n  # initialize break points vector\r\n  bb <- vector(mode=\"numeric\",length=7)\r\n  # logic for lower and upper fences\r\n  if (lofence < qv[1]) {  # no lower outliers\r\n    bb[1] <- lofence\r\n    bb[2] <- floor(qv[1])\r\n  } else {\r\n    bb[2] <- lofence\r\n    bb[1] <- qv[1]\r\n  }\r\n  if (upfence > qv[5]) { # no upper outliers\r\n    bb[7] <- upfence\r\n    bb[6] <- ceiling(qv[5])\r\n  } else {\r\n    bb[6] <- upfence\r\n    bb[7] <- qv[5]\r\n  }\r\n  bb[3:5] <- qv[2:4]\r\n  return(bb)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nget.var <- function(vname,df) {\r\n  v <- df[vname] %>% st_set_geometry(NULL)\r\n  v <- unname(v[,1])\r\n  return(v)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nJuly2021_No_Zero <- Case_Rate_Final %>%\r\n  filter('07-2021' >= 0)\r\nvar <- get.var(\"07-2021\", Case_Rate_Final)  \r\nboxbreaks(var)\r\n\r\n\r\n[1] 0.000001873189 0.000001933497 0.000005451432 0.000006583395\r\n[5] 0.000007796722 0.000011314658 0.000038082902\r\n\r\n\r\n\r\nboxmap <- function(vnam, df, \r\n                   legtitle=NA,\r\n                   mtitle=\"Box Map\",\r\n                   mult=1.5){\r\n  var <- get.var(vnam,df)\r\n  bb <- boxbreaks(var)\r\n  tm_shape(df) +\r\n     tm_fill(vnam,title=legtitle,\r\n             breaks=bb,\r\n             palette=\"Blues\",\r\n          labels = c(\"lower outlier\", \r\n                     \"< 25%\", \r\n                     \"25% - 50%\", \r\n                     \"50% - 75%\",\r\n                     \"> 75%\", \r\n                     \"upper outlier\"))  +\r\n  tm_borders() +\r\n  tm_layout(main.title = \"Cumulative Confirmed Case Rate in July 2021\",\r\n            main.title.position = \"center\",\r\n            main.title.size = 1.2,\r\n            legend.outside = TRUE,\r\n            legend.height = 0.45, \r\n            legend.width = 0.35,\r\n            frame = TRUE) +\r\n  tm_compass(type=\"8star\", size = 2, position = c( 'left','bottom')) +\r\n  tm_scale_bar(position = c( 'left','bottom'))\r\n}\r\n\r\n\r\n\r\n\r\n\r\nboxmap(\"07-2021\", Case_Rate_Final)\r\n\r\n\r\n\r\n\r\nRelative Risk\r\n\r\n\r\nDeath_Rate_Final <- Death_Rate_Final %>%\r\n  mutate(`EXPECTED_DEATH` = `POSITIVE_CASES` * `07-2021`)\r\n\r\nDeath_Rate_Final <- Death_Rate_Final %>%\r\n  mutate(`SMR` = `DEATHS` / `EXPECTED_DEATH`)\r\n\r\n\r\n\r\nData Prepartion for Relative Risk Mapping\r\n\r\n\r\n# \r\n# Jakarta_Death_Final   <- Jakarta_Death_Final %>%  group_by('Expected_Death',Sub_District)  %>% dplyr::summarise(`SMR` = (Death)/(Expected_Death)) %>% ungroup()\r\n# \r\n# Jakarta_Death_Final   <- Jakarta_Death_Final %>%  group_by(Sub_District,SMR)  %>% dplyr::summarise(`SMR_Avg` = sum(SMR)/15)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-27-take-home-exercise-1/take-home-exercise-1_files/figure-html5/unnamed-chunk-45-1.png",
    "last_modified": "2021-09-06T17:59:39+08:00",
    "input_file": "take-home-exercise-1.knit.md"
  },
  {
    "path": "posts/2021-09-06-in-class-exercise-4/",
    "title": "In-class Exercise 4",
    "description": "In this hands-on exercise, we learnt how to handle raster-based geospatial data and convert data to spatial/sp/ppp classes using sf package.",
    "author": [
      {
        "name": "Teo Jun Peng",
        "url": "https://teojp3-is415.netlify.app/"
      }
    ],
    "date": "2021-09-06",
    "categories": [],
    "contents": "\r\nInstalling and Loading the R Packages\r\nsf is mainly used for importing geospatial data\r\nraster is for handling raster-based geospatial data\r\n\r\n\r\npackages = c('maptools', 'sf', 'raster','spatstat', 'tmap', 'tidyverse', 'onemapsgapi')\r\nfor (p in packages){\r\nif(!require(p, character.only = T)){\r\ninstall.packages(p)\r\n}\r\nlibrary(p,character.only = T)\r\n}\r\n\r\n\r\n\r\nTrying out OneMap API\r\n\r\n\r\nget_theme_status('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjc5NTgsInVzZXJfaWQiOjc5NTgsImVtYWlsIjoianVucGVuZy50ZW8uMjAxOUBzbXUuZWR1LnNnIiwiZm9yZXZlciI6ZmFsc2UsImlzcyI6Imh0dHA6XC9cL29tMi5kZmUub25lbWFwLnNnXC9hcGlcL3YyXC91c2VyXC9zZXNzaW9uIiwiaWF0IjoxNjMwODk2MTY4LCJleHAiOjE2MzEzMjgxNjgsIm5iZiI6MTYzMDg5NjE2OCwianRpIjoiYzBlNmJmNTg2OTVhOWJkOWE5NDU2MzFmOWI5YWY4YTIifQ._PeYQI2jiLSphQI_r5dzfzGbSCSPnZBW19_gOoENlvM', \"kindergartens\")\r\n\r\n\r\nUpdatedFile \r\n       TRUE \r\n\r\n\r\n\r\nsearch_themes('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjc5NTgsInVzZXJfaWQiOjc5NTgsImVtYWlsIjoianVucGVuZy50ZW8uMjAxOUBzbXUuZWR1LnNnIiwiZm9yZXZlciI6ZmFsc2UsImlzcyI6Imh0dHA6XC9cL29tMi5kZmUub25lbWFwLnNnXC9hcGlcL3YyXC91c2VyXC9zZXNzaW9uIiwiaWF0IjoxNjMwODk2MTY4LCJleHAiOjE2MzEzMjgxNjgsIm5iZiI6MTYzMDg5NjE2OCwianRpIjoiYzBlNmJmNTg2OTVhOWJkOWE5NDU2MzFmOWI5YWY4YTIifQ._PeYQI2jiLSphQI_r5dzfzGbSCSPnZBW19_gOoENlvM')\r\n\r\n\r\n# A tibble: 185 x 5\r\n   THEMENAME           QUERYNAME    ICON     CATEGORY  THEME_OWNER    \r\n   <chr>               <chr>        <chr>    <chr>     <chr>          \r\n 1 MCE KPE Speed Came~ mce_kpe_spe~ icon_en~ Community LAND TRANSPORT~\r\n 2 Singapore Police F~ spf_msc      SpeedCa~ Community SINGAPORE POLI~\r\n 3 Liquor Control Zon~ liquor_cont~ Crest_2~ Community SINGAPORE POLI~\r\n 4 Singapore Police F~ as_istana_c~ Crest_2~ Community SINGAPORE POLI~\r\n 5 Singapore Police F~ as_istana_b~ Crest_2~ Community SINGAPORE POLI~\r\n 6 Inland Ash Scatter~ ias          circle.~ Environm~ NATIONAL ENVIR~\r\n 7 Dengue (Cases) - N~ denguecase_~ Picture~ Health    NATIONAL ENVIR~\r\n 8 CET Centres         cetcentres   WSQ.jpg  Education SINGAPORE WORK~\r\n 9 HDB Branches        hdb_branches M0906.p~ Governme~ HOUSING AND DE~\r\n10 Licensed premises ~ customs_pet~ null     null      SINGAPORE CUST~\r\n# ... with 175 more rows\r\n\r\nImporting Geospatial Data\r\n\r\n\r\nsg_sf <- st_read(dsn = \"data/handson4data\", layer=\"CostalOutline\")\r\n\r\n\r\nReading layer `CostalOutline' from data source \r\n  `C:\\teojp3\\IS415_blog\\data\\handson4data' using driver `ESRI Shapefile'\r\nSimple feature collection with 60 features and 4 fields\r\nGeometry type: POLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\r\nProjected CRS: SVY21\r\n\r\nmpsz_sf <- st_read(dsn = \"data/handson4data\", layer = \"MP14_SUBZONE_WEB_PL\")\r\n\r\n\r\nReading layer `MP14_SUBZONE_WEB_PL' from data source \r\n  `C:\\teojp3\\IS415_blog\\data\\handson4data' using driver `ESRI Shapefile'\r\nSimple feature collection with 323 features and 15 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\r\nProjected CRS: SVY21\r\n\r\nImporting Aspatial Data\r\n\r\n\r\nchildcare <- read_rds(\"data/ice4data/rds/childcare.rds\")\r\nCHAS <- read_rds('data/ice4data/rds/CHAS.rds')\r\n\r\n\r\n\r\n\r\n\r\nCHAS_sf <- st_as_sf(CHAS,\r\n                    coords = c(\"X_COORDINATE\",\r\n                               \"Y_COORDINATE\"), crs = 3414)\r\n\r\n\r\n\r\n\r\n\r\nchildcare$lat <- as.numeric(childcare$Lat)\r\nchildcare$Lng <- as.numeric(childcare$Lng)\r\n\r\nchildcare_sf <- st_as_sf(childcare, coords = c(\"Lng\",\r\n                                               \"Lat\"),\r\n                         crs = 4326) %>%\r\n  st_transform(crs = 3414)\r\n\r\nmpsz_sf3414 <- st_transform(mpsz_sf, \r\n                              crs = 3414)\r\n\r\nsg_sf3414 <- st_transform(sg_sf, \r\n                              crs = 3414)\r\n\r\n\r\n\r\nGeospatial Data Wrangling\r\nConverting from sf to Spatial* Classes\r\n\r\n\r\nchildcare <- as_Spatial(childcare_sf)\r\nCHAS <- as_Spatial(CHAS_sf)\r\nmpsz <- as_Spatial(mpsz_sf3414)\r\nsg <- as_Spatial(sg_sf3414)\r\n\r\n\r\n\r\nConvering from Spatial* classes to sp format\r\n\r\n\r\nchildcare_sp <- as(childcare, \"SpatialPoints\")\r\nCHAS_sp <- as(CHAS, \"SpatialPoints\")\r\nsg_sp <- as(sg, \"SpatialPolygons\")\r\n\r\n\r\n\r\nConverting from sp to spatstat ppp format\r\n\r\n\r\nchildcare_ppp <- as(childcare_sp, \"ppp\")\r\nCHAS_ppp <- as(CHAS_sp, \"ppp\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-09-06T11:33:15+08:00",
    "input_file": "in-class-exercise-4.knit.md"
  },
  {
    "path": "posts/2021-08-30-in-class-exercise-3/",
    "title": "In-class Exercise 3",
    "description": "In this ICE, we learnt about the various approaches to analytical mapping.",
    "author": [
      {
        "name": "Teo Jun Peng",
        "url": "https://teojp3-is415.netlify.app/"
      }
    ],
    "date": "2021-08-31",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\nVisualising Extreme Values: Box Plot\r\n\r\n\r\nggplot(data=mpszpop2020, \r\n       aes(x = \"\", \r\n           y = AGED)) +\r\n  geom_boxplot()\r\n\r\n\r\n\r\n\r\nPercentile Map\r\nExtracting a variable from an sf data frame\r\n\r\n\r\nmpszpop2020a <- mpszpop2020 %>%\r\n  drop_na()\r\n\r\npercent <- c(0,.01,.1,.5,.9,.99,1)\r\nvar <- mpszpop2020a[\"DEPENDENCY\"] %>%\r\n  st_set_geometry(NULL)\r\nquantile(var[,1], percent)\r\n\r\n\r\n        0%         1%        10%        50%        90%        99% \r\n 0.0000000  0.0300000  0.5600000  0.7063063  0.8271605  1.2100000 \r\n      100% \r\n19.0000000 \r\n\r\nWriting Functions\r\nCreating the get.var function\r\n\r\n\r\nget.var <- function(vname,df) {\r\n  v <- df[vname] %>% \r\n    st_set_geometry(NULL)\r\n  v <- unname(v[,1])\r\n  return(v)\r\n}\r\n\r\n\r\n\r\nPlotting a percentile map using tmap functions\r\n\r\n\r\npercent <- c(0,.01,.1,.5,.9,.99,1)\r\nvar <- get.var(\"DEPENDENCY\", mpszpop2020a)\r\nbperc <- quantile(var,percent)\r\ntm_shape(mpszpop2020) +\r\n  tm_polygons() +\r\ntm_shape(mpszpop2020a) +\r\n  tm_fill(\"DEPENDENCY\",\r\n          title=\"DEPENDENCY\",\r\n          breaks=bperc,\r\n          palette=\"Blues\",\r\n          labels=c(\"< 1%\", \"1% - 10%\",\r\n                   \"10% - 50%\", \r\n                   \"50% - 90%\",\r\n                   \"90% - 99%\", \r\n                   \"> 99%\"))  +\r\n  tm_borders() +\r\n  tm_layout(title = \"Percentile Map\", \r\n            title.position = c(\"right\",\r\n                               \"bottom\"))\r\n\r\n\r\n\r\n\r\nA percentile Mapping Function\r\n\r\n\r\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\r\n  percent <- c(0,.01,.1,.5,.9,.99,1)\r\n  var <- get.var(vnam,df)\r\n  bperc <- quantile(var,percent)\r\n  tm_shape(mpszpop2020) +\r\n  tm_polygons() +\r\n  tm_shape(df) +\r\n     tm_fill(vnam,\r\n             title=legtitle,\r\n             breaks=bperc,\r\n             palette=\"Blues\",\r\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\r\n  tm_borders() +\r\n  tm_layout(title = mtitle, title.position = c(\"right\",\"bottom\"))\r\n}\r\n\r\n\r\n\r\nTrying out the function with AGED and YOUNG data\r\n\r\n\r\npercentmap(\"AGED\", mpszpop2020a)\r\n\r\n\r\n\r\n\r\n\r\n\r\npercentmap(\"YOUNG\", mpszpop2020a)\r\n\r\n\r\n\r\n\r\nAssigning the outputs as variables for easier exporting when necesssary\r\n\r\n\r\nagedmap <- percentmap(\"AGED\", mpszpop2020a)\r\nyoungmap <- percentmap(\"YOUNG\", mpszpop2020a)\r\n\r\n\r\n\r\nBox Map (AKA Map visualisation of box plot)\r\nCreating the boxbreaks function\r\n\r\n\r\nboxbreaks <- function(v,mult=1.5) {\r\n  qv <- unname(quantile(v))\r\n  iqr <- qv[4] - qv[2]\r\n  upfence <- qv[4] + mult * iqr\r\n  lofence <- qv[2] - mult * iqr\r\n  # initialize break points vector\r\n  bb <- vector(mode=\"numeric\",length=7)\r\n  # logic for lower and upper fences\r\n  if (lofence < qv[1]) {  # no lower outliers\r\n    bb[1] <- lofence\r\n    bb[2] <- floor(qv[1])\r\n  } else {\r\n    bb[2] <- lofence\r\n    bb[1] <- qv[1]\r\n  }\r\n  if (upfence > qv[5]) { # no upper outliers\r\n    bb[7] <- upfence\r\n    bb[6] <- ceiling(qv[5])\r\n  } else {\r\n    bb[6] <- upfence\r\n    bb[7] <- qv[5]\r\n  }\r\n  bb[3:5] <- qv[2:4]\r\n  return(bb)\r\n}\r\n\r\n\r\n\r\nCreating the get.var function and testing\r\n\r\n\r\nget.var <- function(vname,df) {\r\n  v <- df[vname] %>% st_set_geometry(NULL)\r\n  v <- unname(v[,1])\r\n  return(v)\r\n}\r\n\r\nmpszpop2020a <- mpszpop2020 %>%\r\n  filter(AGED>=0)\r\nvar <- get.var(\"AGED\", mpszpop2020a)\r\nboxbreaks(var)\r\n\r\n\r\n[1] -4362.5     0.0   505.0  2080.0  3750.0  8617.5 20240.0\r\n\r\nBoxmap Function\r\n\r\n\r\nboxmap <- function(vnam, df, \r\n                   legtitle=NA,\r\n                   mtitle=\"Box Map\",\r\n                   mult=1.5){\r\n  var <- get.var(vnam,df)\r\n  bb <- boxbreaks(var)\r\n  tm_shape(mpszpop2020) +\r\n     tm_fill(vnam,title=legtitle,\r\n             breaks=bb,\r\n             palette=\"Blues\",\r\n          labels = c(\"lower outlier\", \r\n                     \"< 25%\", \r\n                     \"25% - 50%\", \r\n                     \"50% - 75%\",\r\n                     \"> 75%\", \r\n                     \"upper outlier\"))  +\r\n  tm_borders() +\r\n  tm_layout(title = mtitle, \r\n            title.position = c(\"right\",\r\n                               \"bottom\"))\r\n}\r\n\r\n\r\n\r\nBox Map of AGED population\r\n\r\n\r\nboxmap(\"ECONOMY ACTIVE\", mpszpop2020a)\r\n\r\n\r\n\r\n\r\nRaw rate map\r\nTo address biasness like huge differences in the overall population etc. Using raw rate map would make a more comprehensive analysis\r\n\r\n\r\nmpszpop2020a <- mpszpop2020 %>%\r\n  mutate(`AGED%` = (`AGED`\r\n/`TOTAL`)*100) %>%\r\n  filter(`AGED%` >= 0)\r\n\r\n\r\n\r\n\r\n\r\nvar <- get.var(\"AGED%\", mpszpop2020a)\r\nboxbreaks(var)\r\n\r\n\r\n[1] -2.367018  0.000000 11.271651 16.202946 20.364098 34.002767\r\n[7] 95.000000\r\n\r\nboxmap(\"AGED\",mpszpop2020a)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-30-in-class-exercise-3/in-class-exercise-3_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2021-08-30T19:37:49+08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-08-30-hands-on-ex03/",
    "title": "Hands-on Exercise 3",
    "description": "In this hands-on exercise, we learnt how to plot functional and truthful choropleth maps by using an R package called tmap package.",
    "author": [
      {
        "name": "Teo Jun Peng",
        "url": "https://teojp3-is415.netlify.app/"
      }
    ],
    "date": "2021-08-29",
    "categories": [],
    "contents": "\r\nGetting started\r\nThis code chunk create a list of R packages needed.\r\n\r\n\r\npackages = c('sf', 'tmap', 'tidyverse', 'readr')\r\nfor (p in packages){\r\n  if(!require(p, character.only = T)){\r\n    install.packages(p)\r\n  }\r\n  library(p,character.only = T)\r\n}\r\n\r\n\r\n\r\nImporting Data into R\r\nThe code chunk below uses the st_read() function of sf package to import “MP14_SUBZONE_WEB_PL” shapefile into R as a simple feature data frame called mpsz.\r\n\r\n\r\nmpsz <- st_read(dsn = \"data/handson3data/geospatial\", \r\n                layer = \"MP14_SUBZONE_WEB_PL\")\r\n\r\n\r\nReading layer `MP14_SUBZONE_WEB_PL' from data source \r\n  `C:\\teojp3\\IS415_blog\\data\\handson3data\\geospatial' \r\n  using driver `ESRI Shapefile'\r\nSimple feature collection with 323 features and 15 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\r\nProjected CRS: SVY21\r\n\r\n\r\n\r\nmpsz\r\n\r\n\r\nSimple feature collection with 323 features and 15 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\r\nProjected CRS: SVY21\r\nFirst 10 features:\r\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND\r\n1         1          1    MARINA SOUTH    MSSZ01      Y\r\n2         2          1    PEARL'S HILL    OTSZ01      Y\r\n3         3          3       BOAT QUAY    SRSZ03      Y\r\n4         4          8  HENDERSON HILL    BMSZ08      N\r\n5         5          3         REDHILL    BMSZ03      N\r\n6         6          7  ALEXANDRA HILL    BMSZ07      N\r\n7         7          9   BUKIT HO SWEE    BMSZ09      N\r\n8         8          2     CLARKE QUAY    SRSZ02      Y\r\n9         9         13 PASIR PANJANG 1    QTSZ13      N\r\n10       10          7       QUEENSWAY    QTSZ07      N\r\n        PLN_AREA_N PLN_AREA_C       REGION_N REGION_C\r\n1     MARINA SOUTH         MS CENTRAL REGION       CR\r\n2           OUTRAM         OT CENTRAL REGION       CR\r\n3  SINGAPORE RIVER         SR CENTRAL REGION       CR\r\n4      BUKIT MERAH         BM CENTRAL REGION       CR\r\n5      BUKIT MERAH         BM CENTRAL REGION       CR\r\n6      BUKIT MERAH         BM CENTRAL REGION       CR\r\n7      BUKIT MERAH         BM CENTRAL REGION       CR\r\n8  SINGAPORE RIVER         SR CENTRAL REGION       CR\r\n9       QUEENSTOWN         QT CENTRAL REGION       CR\r\n10      QUEENSTOWN         QT CENTRAL REGION       CR\r\n            INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\r\n1  5ED7EB253F99252E 2014-12-05 31595.84 29220.19   5267.381\r\n2  8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05   3506.107\r\n3  C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66   1740.926\r\n4  3775D82C5DDBEFBD 2014-12-05 26782.83 29933.77   3313.625\r\n5  85D9ABEF0A40678F 2014-12-05 26201.96 30005.70   2825.594\r\n6  9D286521EF5E3B59 2014-12-05 25358.82 29991.38   4428.913\r\n7  7839A8577144EFE2 2014-12-05 27680.06 30230.86   3275.312\r\n8  48661DC0FBA09F7A 2014-12-05 29253.21 30222.86   2208.619\r\n9  1F721290C421BFAB 2014-12-05 22077.34 29893.78   6571.323\r\n10 3580D2AFFBEE914C 2014-12-05 24168.31 30104.18   3454.239\r\n   SHAPE_Area                       geometry\r\n1   1630379.3 MULTIPOLYGON (((31495.56 30...\r\n2    559816.2 MULTIPOLYGON (((29092.28 30...\r\n3    160807.5 MULTIPOLYGON (((29932.33 29...\r\n4    595428.9 MULTIPOLYGON (((27131.28 30...\r\n5    387429.4 MULTIPOLYGON (((26451.03 30...\r\n6   1030378.8 MULTIPOLYGON (((25899.7 297...\r\n7    551732.0 MULTIPOLYGON (((27746.95 30...\r\n8    290184.7 MULTIPOLYGON (((29351.26 29...\r\n9   1084792.3 MULTIPOLYGON (((20996.49 30...\r\n10   631644.3 MULTIPOLYGON (((24472.11 29...\r\n\r\nImporting Attribute Data into R\r\nThe read_csv() function will change the imported .csv file into an R dataframe\r\n\r\n\r\npopdata <- read_csv(\"data/handson3data/aspatial/respopagesexfa2011to2020.csv\")\r\n\r\n\r\n\r\nData Preparation and Wrangling\r\nPreparing the data for use in the choropleth maps\r\n\r\n\r\npopdata2020 <- popdata %>%\r\n  filter(Time == 2020) %>%\r\n  group_by(PA, SZ, AG) %>%\r\n  summarise(`POP` = sum(`Pop`)) %>%\r\n  ungroup()%>%\r\n  pivot_wider(names_from=AG, \r\n              values_from=POP) %>%\r\n  mutate(YOUNG = rowSums(.[3:6])\r\n         +rowSums(.[12])) %>%\r\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\r\nrowSums(.[13:15]))%>%\r\nmutate(`AGED`=rowSums(.[16:21])) %>%\r\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \r\nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\r\n/`ECONOMY ACTIVE`) %>%\r\n  select(`PA`, `SZ`, `YOUNG`, \r\n       `ECONOMY ACTIVE`, `AGED`, \r\n       `TOTAL`, `DEPENDENCY`)\r\n\r\n\r\n\r\n\r\n\r\npopdata2020 <- popdata2020 %>%\r\n  mutate_at(.vars = vars(PA, SZ), \r\n          .funs = funs(toupper)) %>%\r\n  filter(`ECONOMY ACTIVE` > 0)\r\n\r\n\r\n\r\n\r\n\r\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\r\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\r\n\r\n\r\n\r\n\r\n\r\nmpszpop2020 <- write_rds(mpsz_pop2020, \"data/handson3data/rds/mpszpop2020.rds\")\r\n\r\n\r\n\r\nExamples of Choropleth Mapping with Geospatial Data Using tmap\r\nTrying out various approaches to prepare thematic maps\r\n\r\n\r\ntmap_mode(\"plot\")\r\nqtm(mpsz_pop2020, \r\n    fill = \"DEPENDENCY\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"quantile\", \r\n          palette = \"Blues\",\r\n          title = \"Dependency ratio\") +\r\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\r\n            main.title.position = \"center\",\r\n            main.title.size = 1.2,\r\n            legend.height = 0.45, \r\n            legend.width = 0.35,\r\n            frame = TRUE) +\r\n  tm_borders(alpha = 0.5) +\r\n  tm_compass(type=\"8star\", size = 2) +\r\n  tm_scale_bar() +\r\n  tm_grid(alpha =0.2) +\r\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \r\n             position = c(\"left\", \"bottom\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020) +\r\n  tm_polygons()\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_polygons(\"DEPENDENCY\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\") +\r\n  tm_borders(lwd = 0.1,  alpha = 1)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          n = 5,\r\n          style = \"jenks\") +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          n = 5,\r\n          style = \"equal\") +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\nsummary(mpsz_pop2020$DEPENDENCY)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n 0.0000  0.6540  0.7063  0.7712  0.7657 19.0000      92 \r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          n = 6,\r\n          style = \"quantile\",\r\n          palette = \"Blues\") +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          style = \"quantile\",\r\n          palette = \"-Greens\") +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"jenks\", \r\n          palette = \"Blues\", \r\n          legend.hist = TRUE, \r\n          legend.is.portrait = TRUE,\r\n          legend.hist.z = 0.1) +\r\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\r\n            main.title.position = \"center\",\r\n            main.title.size = 1,\r\n            legend.height = 0.45, \r\n            legend.width = 0.35,\r\n            legend.outside = FALSE,\r\n            legend.position = c(\"right\", \"bottom\"),\r\n            frame = FALSE) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"quantile\", \r\n          palette = \"-Greens\") +\r\n  tm_borders(alpha = 0.5) +\r\n  tmap_style(\"classic\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"quantile\", \r\n          palette = \"Blues\",\r\n          title = \"No. of persons\") +\r\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\r\n            main.title.position = \"center\",\r\n            main.title.size = 1.2,\r\n            legend.height = 0.45, \r\n            legend.width = 0.35,\r\n            frame = TRUE) +\r\n  tm_borders(alpha = 0.5) +\r\n  tm_compass(type=\"8star\", size = 2) +\r\n  tm_scale_bar(width = 0.15) +\r\n  tm_grid(lwd = 0.1, alpha = 0.2) +\r\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \r\n             position = c(\"left\", \"bottom\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\ntmap_style(\"white\")\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(c(\"YOUNG\", \"AGED\"),\r\n          style = \"equal\", \r\n          palette = \"Blues\") +\r\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\r\n  tm_borders(alpha = 0.5) +\r\n  tmap_style(\"white\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020)+ \r\n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\r\n          style = c(\"equal\", \"quantile\"), \r\n          palette = list(\"Blues\",\"Greens\")) +\r\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020) +\r\n  tm_fill(\"DEPENDENCY\",\r\n          style = \"quantile\",\r\n          palette = \"Blues\",\r\n          thres.poly = 0) + \r\n  tm_facets(by=\"REGION_N\", \r\n            free.coords=TRUE, \r\n            drop.shapes=TRUE) +\r\n  tm_layout(legend.show = FALSE,\r\n            title.position = c(\"center\", \"center\"), \r\n            title.size = 20) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\nyoungmap <- tm_shape(mpsz_pop2020)+ \r\n  tm_polygons(\"YOUNG\", \r\n              style = \"quantile\", \r\n              palette = \"Blues\")\r\n\r\nagedmap <- tm_shape(mpsz_pop2020)+ \r\n  tm_polygons(\"AGED\", \r\n              style = \"quantile\", \r\n              palette = \"Blues\")\r\n\r\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"quantile\", \r\n          palette = \"Blues\", \r\n          legend.hist = TRUE, \r\n          legend.is.portrait = TRUE,\r\n          legend.hist.z = 0.1) +\r\n  tm_layout(legend.outside = TRUE,\r\n            legend.height = 0.45, \r\n            legend.width = 5.0,\r\n            legend.position = c(\"right\", \"bottom\"),\r\n            frame = FALSE) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-30-hands-on-ex03/hands-on-ex03_files/figure-html5/unnamed-chunk-9-1.png",
    "last_modified": "2021-08-30T16:43:01+08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-08-23-in-class-exercise-2/",
    "title": "In-class Exercise 2",
    "description": "In this hands-on exercise, I learnt how to handle geospatial data in R by using sf package.",
    "author": [
      {
        "name": "Teo Jun Peng",
        "url": "https://teojp3-is415.netlify.app/"
      }
    ],
    "date": "2021-08-23",
    "categories": [],
    "contents": "\r\nGetting Started\r\nThis code chunk performs three tasks:\r\ncreate a list of R packages needed.\r\n\r\n\r\npackages <- c('sf', 'tidyverse') \r\nfor(p in packages){\r\n  if(!require(p, character.only = T)){\r\n    install.packages(p)\r\n  }\r\n  library(p, character.only = T)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-08-24T14:03:48+08:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Introduction",
    "description": "Welcome to my personal workspace! The content listed on the blog will mainly be related to Geospatial Analytics, a module I'm currently taking this semester.",
    "author": [
      {
        "name": "Teo Jun Peng",
        "url": "https://teojp3-is415.netlify.app/"
      }
    ],
    "date": "2021-08-23",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-08-30T13:14:49+08:00",
    "input_file": {}
  }
]
